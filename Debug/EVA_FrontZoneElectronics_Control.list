
EVA_FrontZoneElectronics_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08003cc4  08003cc4  00004cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec8  08003ec8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ec8  08003ec8  00004ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed0  08003ed0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed0  08003ed0  00004ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ed4  08003ed4  00004ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ed8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003418  2000000c  08003ee4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003424  08003ee4  00005424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c9a  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac3  00000000  00000000  0000eccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00010798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000845  00000000  00000000  00011238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179eb  00000000  00000000  00011a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c175  00000000  00000000  00029468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a823  00000000  00000000  000355dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfe00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cfc  00000000  00000000  000bfe44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000c2b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cac 	.word	0x08003cac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003cac 	.word	0x08003cac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	@ 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2iz>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000734:	d215      	bcs.n	8000762 <__aeabi_d2iz+0x36>
 8000736:	d511      	bpl.n	800075c <__aeabi_d2iz+0x30>
 8000738:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d912      	bls.n	8000768 <__aeabi_d2iz+0x3c>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000752:	fa23 f002 	lsr.w	r0, r3, r2
 8000756:	bf18      	it	ne
 8000758:	4240      	negne	r0, r0
 800075a:	4770      	bx	lr
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	4770      	bx	lr
 8000762:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000766:	d105      	bne.n	8000774 <__aeabi_d2iz+0x48>
 8000768:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800076c:	bf08      	it	eq
 800076e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	2b00      	cmp	r3, #0
 800078c:	db0b      	blt.n	80007a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	f003 021f 	and.w	r2, r3, #31
 8000794:	4906      	ldr	r1, [pc, #24]	@ (80007b0 <__NVIC_EnableIRQ+0x34>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	095b      	lsrs	r3, r3, #5
 800079c:	2001      	movs	r0, #1
 800079e:	fa00 f202 	lsl.w	r2, r0, r2
 80007a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b0a4      	sub	sp, #144	@ 0x90
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f001 fdb7 	bl	800232c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f87d 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f000 f955 	bl	8000a70 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c6:	f000 f93d 	bl	8000a44 <MX_DMA_Init>
  MX_TIM2_Init();
 80007ca:	f000 f8bd 	bl	8000948 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LED_Init();
 80007ce:	f000 f9c5 	bl	8000b5c <LED_Init>
  Delay_Init();
 80007d2:	f000 f9ed 	bl	8000bb0 <Delay_Init>
  UART_Init();
 80007d6:	f000 faa5 	bl	8000d24 <UART_Init>
//  CAN_Init();
  ws2812_init();
 80007da:	f001 fd5b 	bl	8002294 <ws2812_init>
  /* USER CODE END 2 */

  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
  int delayId_0 = Delay_Start(0, 50);
 80007de:	2132      	movs	r1, #50	@ 0x32
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fa15 	bl	8000c10 <Delay_Start>
 80007e6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  Delay_ErrorHandler(delayId_0);
 80007ea:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80007ee:	f000 fa73 	bl	8000cd8 <Delay_ErrorHandler>
  struct led_channel_info led_channels[WS2812_NUM_CHANNELS];

  int ch, animation_state = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80007f8:	b662      	cpsie	i
}
 80007fa:	bf00      	nop

  __enable_irq();

  for (int i = 0; i < WS2812_NUM_CHANNELS; i++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000802:	e01c      	b.n	800083e <main+0x8a>
      led_channels[i].framebuffer = (const uint8_t*)channel_framebuffers[i];
 8000804:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000808:	4613      	mov	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4413      	add	r3, r2
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	4a28      	ldr	r2, [pc, #160]	@ (80008b4 <main+0x100>)
 8000812:	441a      	add	r2, r3
 8000814:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	3390      	adds	r3, #144	@ 0x90
 800081c:	443b      	add	r3, r7
 800081e:	f843 2c90 	str.w	r2, [r3, #-144]
      led_channels[i].length = FRAMEBUFFER_SIZE * sizeof(struct pixel);
 8000822:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	3390      	adds	r3, #144	@ 0x90
 800082a:	443b      	add	r3, r7
 800082c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000830:	f843 2c8c 	str.w	r2, [r3, #-140]
  for (int i = 0; i < WS2812_NUM_CHANNELS; i++) {
 8000834:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000838:	3301      	adds	r3, #1
 800083a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800083e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000842:	2b0f      	cmp	r3, #15
 8000844:	ddde      	ble.n	8000804 <main+0x50>
  }
  while (1)
  {
      if (Delay_Completed(0))
 8000846:	2000      	movs	r0, #0
 8000848:	f000 fa10 	bl	8000c6c <Delay_Completed>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d005      	beq.n	800085e <main+0xaa>
      {
          LED_Toggle();
 8000852:	f000 f99f 	bl	8000b94 <LED_Toggle>
          Delay_Start(0, 50);      // Restart the delay
 8000856:	2132      	movs	r1, #50	@ 0x32
 8000858:	2000      	movs	r0, #0
 800085a:	f000 f9d9 	bl	8000c10 <Delay_Start>
      }
      for (ch = 0; ch < WS2812_NUM_CHANNELS; ch++)
 800085e:	2300      	movs	r3, #0
 8000860:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000864:	e013      	b.n	800088e <main+0xda>
    	  make_light_patterns(channel_framebuffers[ch], ch, animation_state);
 8000866:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	021b      	lsls	r3, r3, #8
 8000872:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <main+0x100>)
 8000874:	4413      	add	r3, r2
 8000876:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800087a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fb4e 	bl	8000f20 <make_light_patterns>
      for (ch = 0; ch < WS2812_NUM_CHANNELS; ch++)
 8000884:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000888:	3301      	adds	r3, #1
 800088a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800088e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000892:	2b0f      	cmp	r3, #15
 8000894:	dde7      	ble.n	8000866 <main+0xb2>

      animation_state++;
 8000896:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800089a:	3301      	adds	r3, #1
 800089c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop

      __disable_irq();
      ws2812_refresh(led_channels, GPIOB);
 80008a4:	463b      	mov	r3, r7
 80008a6:	4904      	ldr	r1, [pc, #16]	@ (80008b8 <main+0x104>)
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fb99 	bl	8001fe0 <ws2812_refresh>
  __ASM volatile ("cpsie i" : : : "memory");
 80008ae:	b662      	cpsie	i
}
 80008b0:	bf00      	nop
      if (Delay_Completed(0))
 80008b2:	e7c8      	b.n	8000846 <main+0x92>
 80008b4:	200002e8 	.word	0x200002e8
 80008b8:	40010c00 	.word	0x40010c00

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b090      	sub	sp, #64	@ 0x40
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	2228      	movs	r2, #40	@ 0x28
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 f9c2 	bl	8003c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008fa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	4618      	mov	r0, r3
 8000906:	f002 f8ab 	bl	8002a60 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000910:	f000 fcf6 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2302      	movs	r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000920:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2102      	movs	r1, #2
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fb18 	bl	8002f64 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800093a:	f000 fce1 	bl	8001300 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3740      	adds	r7, #64	@ 0x40
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	@ 0x38
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000978:	4b31      	ldr	r3, [pc, #196]	@ (8000a40 <MX_TIM2_Init+0xf8>)
 800097a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800097e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000980:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <MX_TIM2_Init+0xf8>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <MX_TIM2_Init+0xf8>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800098c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <MX_TIM2_Init+0xf8>)
 800098e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b2a      	ldr	r3, [pc, #168]	@ (8000a40 <MX_TIM2_Init+0xf8>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <MX_TIM2_Init+0xf8>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a0:	4827      	ldr	r0, [pc, #156]	@ (8000a40 <MX_TIM2_Init+0xf8>)
 80009a2:	f002 fc3b 	bl	800321c <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009ac:	f000 fca8 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4820      	ldr	r0, [pc, #128]	@ (8000a40 <MX_TIM2_Init+0xf8>)
 80009be:	f002 fd97 	bl	80034f0 <HAL_TIM_ConfigClockSource>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009c8:	f000 fc9a 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009cc:	481c      	ldr	r0, [pc, #112]	@ (8000a40 <MX_TIM2_Init+0xf8>)
 80009ce:	f002 fc74 	bl	80032ba <HAL_TIM_PWM_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009d8:	f000 fc92 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e4:	f107 0320 	add.w	r3, r7, #32
 80009e8:	4619      	mov	r1, r3
 80009ea:	4815      	ldr	r0, [pc, #84]	@ (8000a40 <MX_TIM2_Init+0xf8>)
 80009ec:	f003 f8d4 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009f6:	f000 fc83 	bl	8001300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fa:	2360      	movs	r3, #96	@ 0x60
 80009fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480b      	ldr	r0, [pc, #44]	@ (8000a40 <MX_TIM2_Init+0xf8>)
 8000a12:	f002 fcab 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a1c:	f000 fc70 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2204      	movs	r2, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <MX_TIM2_Init+0xf8>)
 8000a28:	f002 fca0 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000a32:	f000 fc65 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3738      	adds	r7, #56	@ 0x38
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000028 	.word	0x20000028

08000a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_DMA_Init+0x28>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a07      	ldr	r2, [pc, #28]	@ (8000a6c <MX_DMA_Init+0x28>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6153      	str	r3, [r2, #20]
 8000a56:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <MX_DMA_Init+0x28>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a84:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <MX_GPIO_Init+0xb4>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a26      	ldr	r2, [pc, #152]	@ (8000b24 <MX_GPIO_Init+0xb4>)
 8000a8a:	f043 0320 	orr.w	r3, r3, #32
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b24      	ldr	r3, [pc, #144]	@ (8000b24 <MX_GPIO_Init+0xb4>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0320 	and.w	r3, r3, #32
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <MX_GPIO_Init+0xb4>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a20      	ldr	r2, [pc, #128]	@ (8000b24 <MX_GPIO_Init+0xb4>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <MX_GPIO_Init+0xb4>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <MX_GPIO_Init+0xb4>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b24 <MX_GPIO_Init+0xb4>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <MX_GPIO_Init+0xb4>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000acc:	2200      	movs	r2, #0
 8000ace:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 8000ad2:	4815      	ldr	r0, [pc, #84]	@ (8000b28 <MX_GPIO_Init+0xb8>)
 8000ad4:	f001 ffac 	bl	8002a30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ade:	4812      	ldr	r0, [pc, #72]	@ (8000b28 <MX_GPIO_Init+0xb8>)
 8000ae0:	f001 ffa6 	bl	8002a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000ae4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ae8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	4619      	mov	r1, r3
 8000afc:	480a      	ldr	r0, [pc, #40]	@ (8000b28 <MX_GPIO_Init+0xb8>)
 8000afe:	f001 fe13 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_GPIO_Init+0xbc>)
 8000b18:	f001 fe06 	bl	8002728 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010c00 	.word	0x40010c00
 8000b2c:	40010800 	.word	0x40010800

08000b30 <SysTick_Handler>:

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
}

void SysTick_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

	if (Globalcounter == 0xffffffff) {
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <SysTick_Handler+0x28>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d103      	bne.n	8000b46 <SysTick_Handler+0x16>
        Globalcounter = 0; // Reset the counter if the maximum value is reached
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <SysTick_Handler+0x28>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
    } else {
        Globalcounter++; // Increment the counter
    }

}
 8000b44:	e004      	b.n	8000b50 <SysTick_Handler+0x20>
        Globalcounter++; // Increment the counter
 8000b46:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <SysTick_Handler+0x28>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a02      	ldr	r2, [pc, #8]	@ (8000b58 <SysTick_Handler+0x28>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	2000013c 	.word	0x2000013c

08000b5c <LED_Init>:

void LED_Init (void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

	// Enable clock for GPIOC
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <LED_Init+0x30>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a09      	ldr	r2, [pc, #36]	@ (8000b8c <LED_Init+0x30>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6193      	str	r3, [r2, #24]

	// Set PC13 as output push-pull
	GPIOC->CRH &= ~GPIO_CRH_CNF13;    // Output Push-Pull
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <LED_Init+0x34>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	4a07      	ldr	r2, [pc, #28]	@ (8000b90 <LED_Init+0x34>)
 8000b72:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b76:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE13_0;  // Output mode, max speed 50 MHz
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <LED_Init+0x34>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <LED_Init+0x34>)
 8000b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b82:	6053      	str	r3, [r2, #4]

}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40011000 	.word	0x40011000

08000b94 <LED_Toggle>:

void LED_Toggle(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= GPIO_ODR_ODR13;
 8000b98:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <LED_Toggle+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	4a03      	ldr	r2, [pc, #12]	@ (8000bac <LED_Toggle+0x18>)
 8000b9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	40011000 	.word	0x40011000

08000bb0 <Delay_Init>:

void Delay_Init(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_DELAYS; i++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	e01d      	b.n	8000bf8 <Delay_Init+0x48>
        delays[i].id = i;               // Initialize each delay with a unique id
 8000bbc:	4a13      	ldr	r2, [pc, #76]	@ (8000c0c <Delay_Init+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	4413      	add	r3, r2
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	601a      	str	r2, [r3, #0]
        delays[i].startTime = 0;        // Reset the start time
 8000bc8:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <Delay_Init+0x5c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	4413      	add	r3, r2
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
        delays[i].delayTime = 0;        // Reset the delay time
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <Delay_Init+0x5c>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	011b      	lsls	r3, r3, #4
 8000bdc:	4413      	add	r3, r2
 8000bde:	3308      	adds	r3, #8
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
        delays[i].activeFlag = 0;       // Initialize all delays as inactive
 8000be4:	4a09      	ldr	r2, [pc, #36]	@ (8000c0c <Delay_Init+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	4413      	add	r3, r2
 8000bec:	330c      	adds	r3, #12
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_DELAYS; i++) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b09      	cmp	r3, #9
 8000bfc:	ddde      	ble.n	8000bbc <Delay_Init+0xc>
    }
}
 8000bfe:	bf00      	nop
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000140 	.word	0x20000140

08000c10 <Delay_Start>:

int Delay_Start(int id, int delayTime)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
    if (id >= 0 && id < MAX_DELAYS) {
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db1a      	blt.n	8000c56 <Delay_Start+0x46>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b09      	cmp	r3, #9
 8000c24:	dc17      	bgt.n	8000c56 <Delay_Start+0x46>
        delays[id].startTime = Globalcounter; // Capture the current Globalcounter value
 8000c26:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <Delay_Start+0x54>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	490f      	ldr	r1, [pc, #60]	@ (8000c68 <Delay_Start+0x58>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	440b      	add	r3, r1
 8000c32:	3304      	adds	r3, #4
 8000c34:	601a      	str	r2, [r3, #0]
        delays[id].delayTime = delayTime;
 8000c36:	4a0c      	ldr	r2, [pc, #48]	@ (8000c68 <Delay_Start+0x58>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	4413      	add	r3, r2
 8000c3e:	3308      	adds	r3, #8
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	601a      	str	r2, [r3, #0]
        delays[id].activeFlag = 1;           // Mark this delay as active
 8000c44:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <Delay_Start+0x58>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	4413      	add	r3, r2
 8000c4c:	330c      	adds	r3, #12
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
        return id;                           // Return the id of the delay
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	e001      	b.n	8000c5a <Delay_Start+0x4a>
    }
    return -1; // Invalid id
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	2000013c 	.word	0x2000013c
 8000c68:	20000140 	.word	0x20000140

08000c6c <Delay_Completed>:
        delays[id].activeFlag = 0; // Stop the specified delay
    }
}

int Delay_Completed(int id)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
    if (id >= 0 && id < MAX_DELAYS) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db24      	blt.n	8000cc4 <Delay_Completed+0x58>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b09      	cmp	r3, #9
 8000c7e:	dc21      	bgt.n	8000cc4 <Delay_Completed+0x58>
          if (delays[id].activeFlag && (Globalcounter >= delays[id].startTime + delays[id].delayTime)) {
 8000c80:	4a13      	ldr	r2, [pc, #76]	@ (8000cd0 <Delay_Completed+0x64>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	011b      	lsls	r3, r3, #4
 8000c86:	4413      	add	r3, r2
 8000c88:	330c      	adds	r3, #12
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d019      	beq.n	8000cc4 <Delay_Completed+0x58>
 8000c90:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd0 <Delay_Completed+0x64>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	4413      	add	r3, r2
 8000c98:	3304      	adds	r3, #4
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	490c      	ldr	r1, [pc, #48]	@ (8000cd0 <Delay_Completed+0x64>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	011b      	lsls	r3, r3, #4
 8000ca2:	440b      	add	r3, r1
 8000ca4:	3308      	adds	r3, #8
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	441a      	add	r2, r3
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <Delay_Completed+0x68>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dc08      	bgt.n	8000cc4 <Delay_Completed+0x58>
            delays[id].activeFlag = 0; // Deactivate the delay after completion
 8000cb2:	4a07      	ldr	r2, [pc, #28]	@ (8000cd0 <Delay_Completed+0x64>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	4413      	add	r3, r2
 8000cba:	330c      	adds	r3, #12
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
            return 1; // Delay completed
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <Delay_Completed+0x5a>
        }
    }
    return 0; // Delay not yet completed
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	20000140 	.word	0x20000140
 8000cd4:	2000013c 	.word	0x2000013c

08000cd8 <Delay_ErrorHandler>:

void Delay_ErrorHandler(int delayid)
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	if (delayid == (-1))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce6:	d116      	bne.n	8000d16 <Delay_ErrorHandler+0x3e>
	{
		char errormsg[] = "Invalid Delay Id chosen....\n";
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <Delay_ErrorHandler+0x48>)
 8000cea:	f107 0408 	add.w	r4, r7, #8
 8000cee:	461d      	mov	r5, r3
 8000cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cf8:	c407      	stmia	r4!, {r0, r1, r2}
 8000cfa:	7023      	strb	r3, [r4, #0]
		UART_Send((uint8_t*)errormsg, strlen(errormsg));
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fa25 	bl	8000150 <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 f841 	bl	8000d98 <UART_Send>
	}
}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	@ 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08003cc4 	.word	0x08003cc4

08000d24 <UART_Init>:

void UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and USART1
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // GPIOA clock
 8000d28:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <UART_Init+0x68>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a17      	ldr	r2, [pc, #92]	@ (8000d8c <UART_Init+0x68>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <UART_Init+0x68>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a14      	ldr	r2, [pc, #80]	@ (8000d8c <UART_Init+0x68>)
 8000d3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3e:	6193      	str	r3, [r2, #24]

    // Configure PA9 (TX) as Alternate function push-pull
    GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9);
 8000d40:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <UART_Init+0x6c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <UART_Init+0x6c>)
 8000d46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000d4a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1); // Output mode, max speed 2 MHz
 8000d4c:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <UART_Init+0x6c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	4a0f      	ldr	r2, [pc, #60]	@ (8000d90 <UART_Init+0x6c>)
 8000d52:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000d56:	6053      	str	r3, [r2, #4]

    // Configure PA10 (RX) as input floating
    GPIOA->CRH &= ~(GPIO_CRH_CNF10 | GPIO_CRH_MODE10);
 8000d58:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <UART_Init+0x6c>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d90 <UART_Init+0x6c>)
 8000d5e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d62:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_0; // Input floating
 8000d64:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <UART_Init+0x6c>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4a09      	ldr	r2, [pc, #36]	@ (8000d90 <UART_Init+0x6c>)
 8000d6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d6e:	6053      	str	r3, [r2, #4]

    // Configure baud rate
    USART1->BRR = (Clock_Frequency*1000) / BAUD_RATE;
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <UART_Init+0x70>)
 8000d72:	f240 2271 	movw	r2, #625	@ 0x271
 8000d76:	609a      	str	r2, [r3, #8]

    // Enable USART, TX, RX and RXNE interrupt
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_UE;
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <UART_Init+0x70>)
 8000d7a:	f242 022c 	movw	r2, #8236	@ 0x202c
 8000d7e:	60da      	str	r2, [r3, #12]

    // Enable USART1 global interrupt
    NVIC_EnableIRQ(USART1_IRQn);
 8000d80:	2025      	movs	r0, #37	@ 0x25
 8000d82:	f7ff fcfb 	bl	800077c <__NVIC_EnableIRQ>
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010800 	.word	0x40010800
 8000d94:	40013800 	.word	0x40013800

08000d98 <UART_Send>:

void UART_Send(uint8_t *data, uint16_t size)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < size; i++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	81fb      	strh	r3, [r7, #14]
 8000da8:	e02a      	b.n	8000e00 <UART_Send+0x68>
        while (((txHead + 1) % TX_BUFFER_SIZE) == txTail); // Wait if buffer is full
 8000daa:	bf00      	nop
 8000dac:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <UART_Send+0x98>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	3301      	adds	r3, #1
 8000db4:	425a      	negs	r2, r3
 8000db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000dba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000dbe:	bf58      	it	pl
 8000dc0:	4253      	negpl	r3, r2
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e34 <UART_Send+0x9c>)
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d0ef      	beq.n	8000dac <UART_Send+0x14>
        txBuffer[txHead] = data[i];
 8000dcc:	89fb      	ldrh	r3, [r7, #14]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a17      	ldr	r2, [pc, #92]	@ (8000e30 <UART_Send+0x98>)
 8000dd4:	7812      	ldrb	r2, [r2, #0]
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	7819      	ldrb	r1, [r3, #0]
 8000dda:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <UART_Send+0xa0>)
 8000ddc:	5499      	strb	r1, [r3, r2]
        txHead = (txHead + 1) % TX_BUFFER_SIZE;
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <UART_Send+0x98>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	3301      	adds	r3, #1
 8000de6:	425a      	negs	r2, r3
 8000de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000dec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000df0:	bf58      	it	pl
 8000df2:	4253      	negpl	r3, r2
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <UART_Send+0x98>)
 8000df8:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 8000dfa:	89fb      	ldrh	r3, [r7, #14]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	81fb      	strh	r3, [r7, #14]
 8000e00:	89fa      	ldrh	r2, [r7, #14]
 8000e02:	887b      	ldrh	r3, [r7, #2]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d3d0      	bcc.n	8000daa <UART_Send+0x12>
    }

    // Enable TXE interrupt to start transmitting
    if (!txBusy) {
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <UART_Send+0xa4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d108      	bne.n	8000e24 <UART_Send+0x8c>
        txBusy = 1;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <UART_Send+0xa4>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
        USART1->CR1 |= USART_CR1_TXEIE;
 8000e18:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <UART_Send+0xa8>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <UART_Send+0xa8>)
 8000e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e22:	60d3      	str	r3, [r2, #12]
    }
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	200002e0 	.word	0x200002e0
 8000e34:	200002e1 	.word	0x200002e1
 8000e38:	200001e0 	.word	0x200001e0
 8000e3c:	200002e4 	.word	0x200002e4
 8000e40:	40013800 	.word	0x40013800

08000e44 <USART1_IRQHandler>:
        rxTail = (rxTail + 1) % RX_BUFFER_SIZE;
    }
}

void USART1_IRQHandler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
    // Check if data is ready to be read
    if (USART1->SR & USART_SR_RXNE) {
 8000e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000efc <USART1_IRQHandler+0xb8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0320 	and.w	r3, r3, #32
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d01e      	beq.n	8000e94 <USART1_IRQHandler+0x50>
        uint8_t data = USART1->DR; // Read received data
 8000e56:	4b29      	ldr	r3, [pc, #164]	@ (8000efc <USART1_IRQHandler+0xb8>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	71fb      	strb	r3, [r7, #7]
        uint8_t nextHead = (rxHead + 1) % RX_BUFFER_SIZE;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <USART1_IRQHandler+0xbc>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	3301      	adds	r3, #1
 8000e64:	425a      	negs	r2, r3
 8000e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000e6e:	bf58      	it	pl
 8000e70:	4253      	negpl	r3, r2
 8000e72:	71bb      	strb	r3, [r7, #6]
        if (nextHead != rxTail) { // If buffer is not full
 8000e74:	4b23      	ldr	r3, [pc, #140]	@ (8000f04 <USART1_IRQHandler+0xc0>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	79ba      	ldrb	r2, [r7, #6]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d009      	beq.n	8000e94 <USART1_IRQHandler+0x50>
            rxBuffer[rxHead] = data;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <USART1_IRQHandler+0xbc>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4619      	mov	r1, r3
 8000e88:	4a1f      	ldr	r2, [pc, #124]	@ (8000f08 <USART1_IRQHandler+0xc4>)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	5453      	strb	r3, [r2, r1]
            rxHead = nextHead;
 8000e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f00 <USART1_IRQHandler+0xbc>)
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	7013      	strb	r3, [r2, #0]
        }
    }

    // Check if transmit data register is empty
    if (USART1->SR & USART_SR_TXE) {
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <USART1_IRQHandler+0xb8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d028      	beq.n	8000ef2 <USART1_IRQHandler+0xae>
        if (txTail != txHead) { // If data is available to transmit
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <USART1_IRQHandler+0xc8>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <USART1_IRQHandler+0xcc>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d017      	beq.n	8000ee0 <USART1_IRQHandler+0x9c>
            USART1->DR = txBuffer[txTail];
 8000eb0:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <USART1_IRQHandler+0xc8>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <USART1_IRQHandler+0xd0>)
 8000eba:	5c9b      	ldrb	r3, [r3, r2]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <USART1_IRQHandler+0xb8>)
 8000ec0:	605a      	str	r2, [r3, #4]
            txTail = (txTail + 1) % TX_BUFFER_SIZE;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <USART1_IRQHandler+0xc8>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	3301      	adds	r3, #1
 8000eca:	425a      	negs	r2, r3
 8000ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ed0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000ed4:	bf58      	it	pl
 8000ed6:	4253      	negpl	r3, r2
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <USART1_IRQHandler+0xc8>)
 8000edc:	701a      	strb	r2, [r3, #0]
            // No more data to send, disable TXE interrupt
            USART1->CR1 &= ~USART_CR1_TXEIE;
            txBusy = 0;
        }
    }
}
 8000ede:	e008      	b.n	8000ef2 <USART1_IRQHandler+0xae>
            USART1->CR1 &= ~USART_CR1_TXEIE;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <USART1_IRQHandler+0xb8>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <USART1_IRQHandler+0xb8>)
 8000ee6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000eea:	60d3      	str	r3, [r2, #12]
            txBusy = 0;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <USART1_IRQHandler+0xd4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40013800 	.word	0x40013800
 8000f00:	200002e2 	.word	0x200002e2
 8000f04:	200002e3 	.word	0x200002e3
 8000f08:	20000260 	.word	0x20000260
 8000f0c:	200002e1 	.word	0x200002e1
 8000f10:	200002e0 	.word	0x200002e0
 8000f14:	200001e0 	.word	0x200001e0
 8000f18:	200002e4 	.word	0x200002e4
 8000f1c:	00000000 	.word	0x00000000

08000f20 <make_light_patterns>:
        framebuffer[(i + blue_offset + state) % FRAMEBUFFER_SIZE].b = i;
    }
}

void make_light_patterns(struct pixel *framebuffer, int channel, int state)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
    int i;

    /* DRL and reverse light: PB0 - Bright white light */
    if (channel == 0) {
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d121      	bne.n	8000f76 <make_light_patterns+0x56>
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e01a      	b.n	8000f6e <make_light_patterns+0x4e>
            framebuffer[i].g = 255 ^ 0xFF;  // Green
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
            framebuffer[i].r = 255 ^ 0xFF;  // Red
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	2200      	movs	r2, #0
 8000f56:	705a      	strb	r2, [r3, #1]
            framebuffer[i].b = 255 ^ 0xFF;  // Blue
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	2200      	movs	r2, #0
 8000f66:	709a      	strb	r2, [r3, #2]
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2bff      	cmp	r3, #255	@ 0xff
 8000f72:	dde1      	ble.n	8000f38 <make_light_patterns+0x18>
            framebuffer[i].r = ((i % 7 == 0) ? 255 : (i % 7 == 1) ? 75 : 0) ^ 0xFF;  // Red
            framebuffer[i].g = ((i % 7 == 1) ? 255 : (i % 7 == 2) ? 255 : 0) ^ 0xFF;  // Green
            framebuffer[i].b = ((i % 7 == 2) ? 255 : (i % 7 == 3) ? 255 : 0) ^ 0xFF;  // Blue
        }
    }
}
 8000f74:	e1b7      	b.n	80012e6 <make_light_patterns+0x3c6>
    else if (channel == 1) {
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d121      	bne.n	8000fc0 <make_light_patterns+0xa0>
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e01a      	b.n	8000fb8 <make_light_patterns+0x98>
            framebuffer[i].g = 0 ^ 0xFF;    // Green
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	22ff      	movs	r2, #255	@ 0xff
 8000f90:	701a      	strb	r2, [r3, #0]
            framebuffer[i].r = 255 ^ 0xFF;  // Red
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	705a      	strb	r2, [r3, #1]
            framebuffer[i].b = 0 ^ 0xFF;    // Blue
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	22ff      	movs	r2, #255	@ 0xff
 8000fb0:	709a      	strb	r2, [r3, #2]
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2bff      	cmp	r3, #255	@ 0xff
 8000fbc:	dde1      	ble.n	8000f82 <make_light_patterns+0x62>
}
 8000fbe:	e192      	b.n	80012e6 <make_light_patterns+0x3c6>
    else if (channel == 6) {
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d121      	bne.n	800100a <make_light_patterns+0xea>
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e01a      	b.n	8001002 <make_light_patterns+0xe2>
            framebuffer[i].g = 0 ^ 0xFF;    // Green
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	22ff      	movs	r2, #255	@ 0xff
 8000fda:	701a      	strb	r2, [r3, #0]
            framebuffer[i].r = 128 ^ 0xFF;  // Red (half brightness)
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	227f      	movs	r2, #127	@ 0x7f
 8000fea:	705a      	strb	r2, [r3, #1]
            framebuffer[i].b = 0 ^ 0xFF;    // Blue
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	22ff      	movs	r2, #255	@ 0xff
 8000ffa:	709a      	strb	r2, [r3, #2]
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2bff      	cmp	r3, #255	@ 0xff
 8001006:	dde1      	ble.n	8000fcc <make_light_patterns+0xac>
}
 8001008:	e16d      	b.n	80012e6 <make_light_patterns+0x3c6>
    else if (channel == 3) {
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	2b03      	cmp	r3, #3
 800100e:	d145      	bne.n	800109c <make_light_patterns+0x17c>
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e03e      	b.n	8001094 <make_light_patterns+0x174>
            framebuffer[(i + state) % FRAMEBUFFER_SIZE].g = ((i < FRAMEBUFFER_SIZE / 8) ? 128 : 0) ^ 0xFF;  // Green
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2b1f      	cmp	r3, #31
 800101a:	dc01      	bgt.n	8001020 <make_light_patterns+0x100>
 800101c:	217f      	movs	r1, #127	@ 0x7f
 800101e:	e000      	b.n	8001022 <make_light_patterns+0x102>
 8001020:	21ff      	movs	r1, #255	@ 0xff
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	425a      	negs	r2, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	bf58      	it	pl
 8001030:	4253      	negpl	r3, r2
 8001032:	461a      	mov	r2, r3
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	460a      	mov	r2, r1
 8001040:	701a      	strb	r2, [r3, #0]
            framebuffer[(i + state) % FRAMEBUFFER_SIZE].r = ((i < FRAMEBUFFER_SIZE / 8) ? 255 : 0) ^ 0xFF;  // Red
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b1f      	cmp	r3, #31
 8001046:	dc01      	bgt.n	800104c <make_light_patterns+0x12c>
 8001048:	2100      	movs	r1, #0
 800104a:	e000      	b.n	800104e <make_light_patterns+0x12e>
 800104c:	21ff      	movs	r1, #255	@ 0xff
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	425a      	negs	r2, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	bf58      	it	pl
 800105c:	4253      	negpl	r3, r2
 800105e:	461a      	mov	r2, r3
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	460a      	mov	r2, r1
 800106c:	705a      	strb	r2, [r3, #1]
            framebuffer[(i + state) % FRAMEBUFFER_SIZE].b = 0 ^ 0xFF;  // Blue
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	425a      	negs	r2, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	bf58      	it	pl
 800107c:	4253      	negpl	r3, r2
 800107e:	461a      	mov	r2, r3
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	22ff      	movs	r2, #255	@ 0xff
 800108c:	709a      	strb	r2, [r3, #2]
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2bff      	cmp	r3, #255	@ 0xff
 8001098:	ddbd      	ble.n	8001016 <make_light_patterns+0xf6>
}
 800109a:	e124      	b.n	80012e6 <make_light_patterns+0x3c6>
    else if (channel == 4) {
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d145      	bne.n	800112e <make_light_patterns+0x20e>
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	e03e      	b.n	8001126 <make_light_patterns+0x206>
            framebuffer[(i + state) % FRAMEBUFFER_SIZE].g = ((i < FRAMEBUFFER_SIZE / 8) ? 128 : 0) ^ 0xFF;  // Green
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2b1f      	cmp	r3, #31
 80010ac:	dc01      	bgt.n	80010b2 <make_light_patterns+0x192>
 80010ae:	217f      	movs	r1, #127	@ 0x7f
 80010b0:	e000      	b.n	80010b4 <make_light_patterns+0x194>
 80010b2:	21ff      	movs	r1, #255	@ 0xff
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	425a      	negs	r2, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	bf58      	it	pl
 80010c2:	4253      	negpl	r3, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	460a      	mov	r2, r1
 80010d2:	701a      	strb	r2, [r3, #0]
            framebuffer[(i + state) % FRAMEBUFFER_SIZE].r = ((i < FRAMEBUFFER_SIZE / 8) ? 255 : 0) ^ 0xFF;  // Red
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2b1f      	cmp	r3, #31
 80010d8:	dc01      	bgt.n	80010de <make_light_patterns+0x1be>
 80010da:	2100      	movs	r1, #0
 80010dc:	e000      	b.n	80010e0 <make_light_patterns+0x1c0>
 80010de:	21ff      	movs	r1, #255	@ 0xff
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	425a      	negs	r2, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	bf58      	it	pl
 80010ee:	4253      	negpl	r3, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	460a      	mov	r2, r1
 80010fe:	705a      	strb	r2, [r3, #1]
            framebuffer[(i + state) % FRAMEBUFFER_SIZE].b = 0 ^ 0xFF;  // Blue
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	425a      	negs	r2, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	bf58      	it	pl
 800110e:	4253      	negpl	r3, r2
 8001110:	461a      	mov	r2, r3
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	22ff      	movs	r2, #255	@ 0xff
 800111e:	709a      	strb	r2, [r3, #2]
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2bff      	cmp	r3, #255	@ 0xff
 800112a:	ddbd      	ble.n	80010a8 <make_light_patterns+0x188>
}
 800112c:	e0db      	b.n	80012e6 <make_light_patterns+0x3c6>
    else if (channel == 5) {
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b05      	cmp	r3, #5
 8001132:	d153      	bne.n	80011dc <make_light_patterns+0x2bc>
        int brightness = (state < 100) ? (state * 2.55) : 255;  // Gradually increase brightness
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b63      	cmp	r3, #99	@ 0x63
 8001138:	dc0f      	bgt.n	800115a <make_light_patterns+0x23a>
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fa8c 	bl	8000658 <__aeabi_i2d>
 8001140:	a36b      	add	r3, pc, #428	@ (adr r3, 80012f0 <make_light_patterns+0x3d0>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff f80b 	bl	8000160 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff faeb 	bl	800072c <__aeabi_d2iz>
 8001156:	4603      	mov	r3, r0
 8001158:	e000      	b.n	800115c <make_light_patterns+0x23c>
 800115a:	23ff      	movs	r3, #255	@ 0xff
 800115c:	613b      	str	r3, [r7, #16]
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e037      	b.n	80011d4 <make_light_patterns+0x2b4>
            framebuffer[i].g = (140 * brightness / 255) ^ 0xFF;  // Green
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	228c      	movs	r2, #140	@ 0x8c
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	4a62      	ldr	r2, [pc, #392]	@ (80012f8 <make_light_patterns+0x3d8>)
 800116e:	fb82 1203 	smull	r1, r2, r2, r3
 8001172:	441a      	add	r2, r3
 8001174:	11d2      	asrs	r2, r2, #7
 8001176:	17db      	asrs	r3, r3, #31
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	b2d9      	uxtb	r1, r3
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	43ca      	mvns	r2, r1
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]
            framebuffer[i].r = (255 * brightness / 255) ^ 0xFF;  // Red
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	b2d9      	uxtb	r1, r3
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4413      	add	r3, r2
 800119e:	43ca      	mvns	r2, r1
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	705a      	strb	r2, [r3, #1]
            framebuffer[i].b = (50 * brightness / 255) ^ 0xFF;   // Blue
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	2232      	movs	r2, #50	@ 0x32
 80011a8:	fb02 f303 	mul.w	r3, r2, r3
 80011ac:	4a52      	ldr	r2, [pc, #328]	@ (80012f8 <make_light_patterns+0x3d8>)
 80011ae:	fb82 1203 	smull	r1, r2, r2, r3
 80011b2:	441a      	add	r2, r3
 80011b4:	11d2      	asrs	r2, r2, #7
 80011b6:	17db      	asrs	r3, r3, #31
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	b2d9      	uxtb	r1, r3
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	43ca      	mvns	r2, r1
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	709a      	strb	r2, [r3, #2]
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2bff      	cmp	r3, #255	@ 0xff
 80011d8:	ddc4      	ble.n	8001164 <make_light_patterns+0x244>
}
 80011da:	e084      	b.n	80012e6 <make_light_patterns+0x3c6>
    else if (channel == 7) {
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b07      	cmp	r3, #7
 80011e0:	f040 8081 	bne.w	80012e6 <make_light_patterns+0x3c6>
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	e07a      	b.n	80012e0 <make_light_patterns+0x3c0>
            framebuffer[i].r = ((i % 7 == 0) ? 255 : (i % 7 == 1) ? 75 : 0) ^ 0xFF;  // Red
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4b43      	ldr	r3, [pc, #268]	@ (80012fc <make_light_patterns+0x3dc>)
 80011ee:	fb83 1302 	smull	r1, r3, r3, r2
 80011f2:	4413      	add	r3, r2
 80011f4:	1099      	asrs	r1, r3, #2
 80011f6:	17d3      	asrs	r3, r2, #31
 80011f8:	1ac9      	subs	r1, r1, r3
 80011fa:	460b      	mov	r3, r1
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	1a5b      	subs	r3, r3, r1
 8001200:	1ad1      	subs	r1, r2, r3
 8001202:	2900      	cmp	r1, #0
 8001204:	d011      	beq.n	800122a <make_light_patterns+0x30a>
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4b3c      	ldr	r3, [pc, #240]	@ (80012fc <make_light_patterns+0x3dc>)
 800120a:	fb83 1302 	smull	r1, r3, r3, r2
 800120e:	4413      	add	r3, r2
 8001210:	1099      	asrs	r1, r3, #2
 8001212:	17d3      	asrs	r3, r2, #31
 8001214:	1ac9      	subs	r1, r1, r3
 8001216:	460b      	mov	r3, r1
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	1a5b      	subs	r3, r3, r1
 800121c:	1ad1      	subs	r1, r2, r3
 800121e:	2901      	cmp	r1, #1
 8001220:	d101      	bne.n	8001226 <make_light_patterns+0x306>
 8001222:	22b4      	movs	r2, #180	@ 0xb4
 8001224:	e002      	b.n	800122c <make_light_patterns+0x30c>
 8001226:	22ff      	movs	r2, #255	@ 0xff
 8001228:	e000      	b.n	800122c <make_light_patterns+0x30c>
 800122a:	2200      	movs	r2, #0
 800122c:	6979      	ldr	r1, [r7, #20]
 800122e:	460b      	mov	r3, r1
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	440b      	add	r3, r1
 8001234:	68f9      	ldr	r1, [r7, #12]
 8001236:	440b      	add	r3, r1
 8001238:	705a      	strb	r2, [r3, #1]
            framebuffer[i].g = ((i % 7 == 1) ? 255 : (i % 7 == 2) ? 255 : 0) ^ 0xFF;  // Green
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4b2f      	ldr	r3, [pc, #188]	@ (80012fc <make_light_patterns+0x3dc>)
 800123e:	fb83 1302 	smull	r1, r3, r3, r2
 8001242:	4413      	add	r3, r2
 8001244:	1099      	asrs	r1, r3, #2
 8001246:	17d3      	asrs	r3, r2, #31
 8001248:	1ac9      	subs	r1, r1, r3
 800124a:	460b      	mov	r3, r1
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	1a5b      	subs	r3, r3, r1
 8001250:	1ad1      	subs	r1, r2, r3
 8001252:	2901      	cmp	r1, #1
 8001254:	d011      	beq.n	800127a <make_light_patterns+0x35a>
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <make_light_patterns+0x3dc>)
 800125a:	fb83 1302 	smull	r1, r3, r3, r2
 800125e:	4413      	add	r3, r2
 8001260:	1099      	asrs	r1, r3, #2
 8001262:	17d3      	asrs	r3, r2, #31
 8001264:	1ac9      	subs	r1, r1, r3
 8001266:	460b      	mov	r3, r1
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	1a5b      	subs	r3, r3, r1
 800126c:	1ad1      	subs	r1, r2, r3
 800126e:	2902      	cmp	r1, #2
 8001270:	d101      	bne.n	8001276 <make_light_patterns+0x356>
 8001272:	2200      	movs	r2, #0
 8001274:	e002      	b.n	800127c <make_light_patterns+0x35c>
 8001276:	22ff      	movs	r2, #255	@ 0xff
 8001278:	e000      	b.n	800127c <make_light_patterns+0x35c>
 800127a:	2200      	movs	r2, #0
 800127c:	6979      	ldr	r1, [r7, #20]
 800127e:	460b      	mov	r3, r1
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	440b      	add	r3, r1
 8001284:	68f9      	ldr	r1, [r7, #12]
 8001286:	440b      	add	r3, r1
 8001288:	701a      	strb	r2, [r3, #0]
            framebuffer[i].b = ((i % 7 == 2) ? 255 : (i % 7 == 3) ? 255 : 0) ^ 0xFF;  // Blue
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <make_light_patterns+0x3dc>)
 800128e:	fb83 1302 	smull	r1, r3, r3, r2
 8001292:	4413      	add	r3, r2
 8001294:	1099      	asrs	r1, r3, #2
 8001296:	17d3      	asrs	r3, r2, #31
 8001298:	1ac9      	subs	r1, r1, r3
 800129a:	460b      	mov	r3, r1
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	1a5b      	subs	r3, r3, r1
 80012a0:	1ad1      	subs	r1, r2, r3
 80012a2:	2902      	cmp	r1, #2
 80012a4:	d011      	beq.n	80012ca <make_light_patterns+0x3aa>
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <make_light_patterns+0x3dc>)
 80012aa:	fb83 1302 	smull	r1, r3, r3, r2
 80012ae:	4413      	add	r3, r2
 80012b0:	1099      	asrs	r1, r3, #2
 80012b2:	17d3      	asrs	r3, r2, #31
 80012b4:	1ac9      	subs	r1, r1, r3
 80012b6:	460b      	mov	r3, r1
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	1a5b      	subs	r3, r3, r1
 80012bc:	1ad1      	subs	r1, r2, r3
 80012be:	2903      	cmp	r1, #3
 80012c0:	d101      	bne.n	80012c6 <make_light_patterns+0x3a6>
 80012c2:	2200      	movs	r2, #0
 80012c4:	e002      	b.n	80012cc <make_light_patterns+0x3ac>
 80012c6:	22ff      	movs	r2, #255	@ 0xff
 80012c8:	e000      	b.n	80012cc <make_light_patterns+0x3ac>
 80012ca:	2200      	movs	r2, #0
 80012cc:	6979      	ldr	r1, [r7, #20]
 80012ce:	460b      	mov	r3, r1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	440b      	add	r3, r1
 80012d4:	68f9      	ldr	r1, [r7, #12]
 80012d6:	440b      	add	r3, r1
 80012d8:	709a      	strb	r2, [r3, #2]
        for (i = 0; i < FRAMEBUFFER_SIZE; i++) {
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2bff      	cmp	r3, #255	@ 0xff
 80012e4:	dd81      	ble.n	80011ea <make_light_patterns+0x2ca>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	66666666 	.word	0x66666666
 80012f4:	40046666 	.word	0x40046666
 80012f8:	80808081 	.word	0x80808081
 80012fc:	92492493 	.word	0x92492493

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <Error_Handler+0x8>

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4a14      	ldr	r2, [pc, #80]	@ (8001368 <HAL_MspInit+0x5c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6193      	str	r3, [r2, #24]
 800131e:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_MspInit+0x5c>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a0e      	ldr	r2, [pc, #56]	@ (8001368 <HAL_MspInit+0x5c>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <HAL_MspInit+0x5c>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_MspInit+0x60>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <HAL_MspInit+0x60>)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000

08001370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001380:	f040 808d 	bne.w	800149e <HAL_TIM_Base_MspInit+0x12e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001384:	4b48      	ldr	r3, [pc, #288]	@ (80014a8 <HAL_TIM_Base_MspInit+0x138>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	4a47      	ldr	r2, [pc, #284]	@ (80014a8 <HAL_TIM_Base_MspInit+0x138>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	61d3      	str	r3, [r2, #28]
 8001390:	4b45      	ldr	r3, [pc, #276]	@ (80014a8 <HAL_TIM_Base_MspInit+0x138>)
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 800139c:	4b43      	ldr	r3, [pc, #268]	@ (80014ac <HAL_TIM_Base_MspInit+0x13c>)
 800139e:	4a44      	ldr	r2, [pc, #272]	@ (80014b0 <HAL_TIM_Base_MspInit+0x140>)
 80013a0:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013a2:	4b42      	ldr	r3, [pc, #264]	@ (80014ac <HAL_TIM_Base_MspInit+0x13c>)
 80013a4:	2210      	movs	r2, #16
 80013a6:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a8:	4b40      	ldr	r3, [pc, #256]	@ (80014ac <HAL_TIM_Base_MspInit+0x13c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 80013ae:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <HAL_TIM_Base_MspInit+0x13c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013b4:	4b3d      	ldr	r3, [pc, #244]	@ (80014ac <HAL_TIM_Base_MspInit+0x13c>)
 80013b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ba:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013bc:	4b3b      	ldr	r3, [pc, #236]	@ (80014ac <HAL_TIM_Base_MspInit+0x13c>)
 80013be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c2:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 80013c4:	4b39      	ldr	r3, [pc, #228]	@ (80014ac <HAL_TIM_Base_MspInit+0x13c>)
 80013c6:	2220      	movs	r2, #32
 80013c8:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013ca:	4b38      	ldr	r3, [pc, #224]	@ (80014ac <HAL_TIM_Base_MspInit+0x13c>)
 80013cc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80013d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 80013d2:	4836      	ldr	r0, [pc, #216]	@ (80014ac <HAL_TIM_Base_MspInit+0x13c>)
 80013d4:	f001 f8de 	bl	8002594 <HAL_DMA_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 80013de:	f7ff ff8f 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a31      	ldr	r2, [pc, #196]	@ (80014ac <HAL_TIM_Base_MspInit+0x13c>)
 80013e6:	621a      	str	r2, [r3, #32]
 80013e8:	4a30      	ldr	r2, [pc, #192]	@ (80014ac <HAL_TIM_Base_MspInit+0x13c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80013ee:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <HAL_TIM_Base_MspInit+0x144>)
 80013f0:	4a31      	ldr	r2, [pc, #196]	@ (80014b8 <HAL_TIM_Base_MspInit+0x148>)
 80013f2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f4:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <HAL_TIM_Base_MspInit+0x144>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fa:	4b2e      	ldr	r3, [pc, #184]	@ (80014b4 <HAL_TIM_Base_MspInit+0x144>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8001400:	4b2c      	ldr	r3, [pc, #176]	@ (80014b4 <HAL_TIM_Base_MspInit+0x144>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001406:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <HAL_TIM_Base_MspInit+0x144>)
 8001408:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800140c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800140e:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <HAL_TIM_Base_MspInit+0x144>)
 8001410:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001414:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001416:	4b27      	ldr	r3, [pc, #156]	@ (80014b4 <HAL_TIM_Base_MspInit+0x144>)
 8001418:	2220      	movs	r2, #32
 800141a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800141c:	4b25      	ldr	r3, [pc, #148]	@ (80014b4 <HAL_TIM_Base_MspInit+0x144>)
 800141e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001422:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001424:	4823      	ldr	r0, [pc, #140]	@ (80014b4 <HAL_TIM_Base_MspInit+0x144>)
 8001426:	f001 f8b5 	bl	8002594 <HAL_DMA_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_TIM_Base_MspInit+0xc4>
    {
      Error_Handler();
 8001430:	f7ff ff66 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a1f      	ldr	r2, [pc, #124]	@ (80014b4 <HAL_TIM_Base_MspInit+0x144>)
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24
 800143a:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <HAL_TIM_Base_MspInit+0x144>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 8001442:	4a1f      	ldr	r2, [pc, #124]	@ (80014c0 <HAL_TIM_Base_MspInit+0x150>)
 8001444:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 8001448:	2210      	movs	r2, #16
 800144a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 800145a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800145e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 8001462:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001466:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 800146a:	2220      	movs	r2, #32
 800146c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 8001470:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001474:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001476:	4811      	ldr	r0, [pc, #68]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 8001478:	f001 f88c 	bl	8002594 <HAL_DMA_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_TIM_Base_MspInit+0x116>
    {
      Error_Handler();
 8001482:	f7ff ff3d 	bl	8001300 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a0c      	ldr	r2, [pc, #48]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
 800148c:	4a0b      	ldr	r2, [pc, #44]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a09      	ldr	r2, [pc, #36]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 8001496:	631a      	str	r2, [r3, #48]	@ 0x30
 8001498:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <HAL_TIM_Base_MspInit+0x14c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	20000070 	.word	0x20000070
 80014b0:	4002001c 	.word	0x4002001c
 80014b4:	200000b4 	.word	0x200000b4
 80014b8:	40020058 	.word	0x40020058
 80014bc:	200000f8 	.word	0x200000f8
 80014c0:	40020080 	.word	0x40020080

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <NMI_Handler+0x4>

080014cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <MemManage_Handler+0x4>

080014dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <ws2812_timer_init>:
    #error "Unsupported tiemr instance. Check that WS2812_TIMER_INSTANCE is set to a supported value"
#endif


static void ws2812_timer_init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	@ 0x38
 8001520:	af00      	add	r7, sp, #0
    TIMER_CLK_ENABLE();
 8001522:	4b36      	ldr	r3, [pc, #216]	@ (80015fc <ws2812_timer_init+0xe0>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a35      	ldr	r2, [pc, #212]	@ (80015fc <ws2812_timer_init+0xe0>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b33      	ldr	r3, [pc, #204]	@ (80015fc <ws2812_timer_init+0xe0>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	615a      	str	r2, [r3, #20]
 8001562:	619a      	str	r2, [r3, #24]

    htimer.Instance = HAL_TIMER_INSTANCE;
 8001564:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <ws2812_timer_init+0xe4>)
 8001566:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800156a:	601a      	str	r2, [r3, #0]
    htimer.Init.Prescaler = 0;
 800156c:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <ws2812_timer_init+0xe4>)
 800156e:	2200      	movs	r2, #0
 8001570:	605a      	str	r2, [r3, #4]
    htimer.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001572:	4b23      	ldr	r3, [pc, #140]	@ (8001600 <ws2812_timer_init+0xe4>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
    htimer.Init.Period = WS2812_TIMER_PERIOD;
 8001578:	4b21      	ldr	r3, [pc, #132]	@ (8001600 <ws2812_timer_init+0xe4>)
 800157a:	225a      	movs	r2, #90	@ 0x5a
 800157c:	60da      	str	r2, [r3, #12]

    htimer.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <ws2812_timer_init+0xe4>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
    htimer.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b1e      	ldr	r3, [pc, #120]	@ (8001600 <ws2812_timer_init+0xe4>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htimer);
 800158a:	481d      	ldr	r0, [pc, #116]	@ (8001600 <ws2812_timer_init+0xe4>)
 800158c:	f001 fe46 	bl	800321c <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_TIM_ConfigClockSource(&htimer, &sClockSourceConfig);
 8001596:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800159a:	4619      	mov	r1, r3
 800159c:	4818      	ldr	r0, [pc, #96]	@ (8001600 <ws2812_timer_init+0xe4>)
 800159e:	f001 ffa7 	bl	80034f0 <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer);
 80015a2:	4817      	ldr	r0, [pc, #92]	@ (8001600 <ws2812_timer_init+0xe4>)
 80015a4:	f001 fe89 	bl	80032ba <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer, &sMasterConfig);
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	4619      	mov	r1, r3
 80015b6:	4812      	ldr	r0, [pc, #72]	@ (8001600 <ws2812_timer_init+0xe4>)
 80015b8:	f002 faee 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015bc:	2360      	movs	r3, #96	@ 0x60
 80015be:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH_A_TIME;
 80015c0:	231c      	movs	r3, #28
 80015c2:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer, &sConfigOC, TIMER_CHANNEL_A);
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	480b      	ldr	r0, [pc, #44]	@ (8001600 <ws2812_timer_init+0xe4>)
 80015d4:	f001 feca 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d8:	2360      	movs	r3, #96	@ 0x60
 80015da:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH_B_TIME;
 80015dc:	2339      	movs	r3, #57	@ 0x39
 80015de:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer, &sConfigOC, TIMER_CHANNEL_B);
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2204      	movs	r2, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4804      	ldr	r0, [pc, #16]	@ (8001600 <ws2812_timer_init+0xe4>)
 80015f0:	f001 febc 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
}
 80015f4:	bf00      	nop
 80015f6:	3738      	adds	r7, #56	@ 0x38
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000
 8001600:	200032e8 	.word	0x200032e8

08001604 <ws2812_dma_start>:

static void ws2812_dma_start(GPIO_TypeDef *gpio_bank)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
    /* Peripheral clock enable */
    TIMER_CLK_ENABLE();
 800160c:	4b4c      	ldr	r3, [pc, #304]	@ (8001740 <ws2812_dma_start+0x13c>)
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	4a4b      	ldr	r2, [pc, #300]	@ (8001740 <ws2812_dma_start+0x13c>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	61d3      	str	r3, [r2, #28]
 8001618:	4b49      	ldr	r3, [pc, #292]	@ (8001740 <ws2812_dma_start+0x13c>)
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]

    /* Timer DMA Init */
    /* Timer Update Init */
    hdma_tim_update.Instance = DMA_CHANNEL_TIM_UP;
 8001624:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <ws2812_dma_start+0x140>)
 8001626:	4a48      	ldr	r2, [pc, #288]	@ (8001748 <ws2812_dma_start+0x144>)
 8001628:	601a      	str	r2, [r3, #0]
    hdma_tim_update.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800162a:	4b46      	ldr	r3, [pc, #280]	@ (8001744 <ws2812_dma_start+0x140>)
 800162c:	2210      	movs	r2, #16
 800162e:	605a      	str	r2, [r3, #4]
    hdma_tim_update.Init.PeriphInc = DMA_PINC_DISABLE;
 8001630:	4b44      	ldr	r3, [pc, #272]	@ (8001744 <ws2812_dma_start+0x140>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
    hdma_tim_update.Init.MemInc = DMA_MINC_DISABLE;
 8001636:	4b43      	ldr	r3, [pc, #268]	@ (8001744 <ws2812_dma_start+0x140>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
    hdma_tim_update.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800163c:	4b41      	ldr	r3, [pc, #260]	@ (8001744 <ws2812_dma_start+0x140>)
 800163e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001642:	611a      	str	r2, [r3, #16]
    hdma_tim_update.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001644:	4b3f      	ldr	r3, [pc, #252]	@ (8001744 <ws2812_dma_start+0x140>)
 8001646:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800164a:	615a      	str	r2, [r3, #20]
    hdma_tim_update.Init.Mode = DMA_CIRCULAR;
 800164c:	4b3d      	ldr	r3, [pc, #244]	@ (8001744 <ws2812_dma_start+0x140>)
 800164e:	2220      	movs	r2, #32
 8001650:	619a      	str	r2, [r3, #24]
    hdma_tim_update.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001652:	4b3c      	ldr	r3, [pc, #240]	@ (8001744 <ws2812_dma_start+0x140>)
 8001654:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001658:	61da      	str	r2, [r3, #28]

    /* Timer Ch A Init */
    hdma_tim_pwm_ch_a.Instance = DMA_CHANNEL_TIM_CH_A;
 800165a:	4b3c      	ldr	r3, [pc, #240]	@ (800174c <ws2812_dma_start+0x148>)
 800165c:	4a3c      	ldr	r2, [pc, #240]	@ (8001750 <ws2812_dma_start+0x14c>)
 800165e:	601a      	str	r2, [r3, #0]
    hdma_tim_pwm_ch_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001660:	4b3a      	ldr	r3, [pc, #232]	@ (800174c <ws2812_dma_start+0x148>)
 8001662:	2210      	movs	r2, #16
 8001664:	605a      	str	r2, [r3, #4]
    hdma_tim_pwm_ch_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001666:	4b39      	ldr	r3, [pc, #228]	@ (800174c <ws2812_dma_start+0x148>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
    hdma_tim_pwm_ch_a.Init.MemInc = DMA_MINC_ENABLE;
 800166c:	4b37      	ldr	r3, [pc, #220]	@ (800174c <ws2812_dma_start+0x148>)
 800166e:	2280      	movs	r2, #128	@ 0x80
 8001670:	60da      	str	r2, [r3, #12]
    hdma_tim_pwm_ch_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001672:	4b36      	ldr	r3, [pc, #216]	@ (800174c <ws2812_dma_start+0x148>)
 8001674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001678:	611a      	str	r2, [r3, #16]
    hdma_tim_pwm_ch_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800167a:	4b34      	ldr	r3, [pc, #208]	@ (800174c <ws2812_dma_start+0x148>)
 800167c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001680:	615a      	str	r2, [r3, #20]
    hdma_tim_pwm_ch_a.Init.Mode = DMA_CIRCULAR;
 8001682:	4b32      	ldr	r3, [pc, #200]	@ (800174c <ws2812_dma_start+0x148>)
 8001684:	2220      	movs	r2, #32
 8001686:	619a      	str	r2, [r3, #24]
    hdma_tim_pwm_ch_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001688:	4b30      	ldr	r3, [pc, #192]	@ (800174c <ws2812_dma_start+0x148>)
 800168a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800168e:	61da      	str	r2, [r3, #28]

    /* Timer Ch B Init */
    hdma_tim_pwm_ch_b.Instance = DMA_CHANNEL_TIM_CH_B;
 8001690:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <ws2812_dma_start+0x150>)
 8001692:	4a31      	ldr	r2, [pc, #196]	@ (8001758 <ws2812_dma_start+0x154>)
 8001694:	601a      	str	r2, [r3, #0]
    hdma_tim_pwm_ch_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001696:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <ws2812_dma_start+0x150>)
 8001698:	2210      	movs	r2, #16
 800169a:	605a      	str	r2, [r3, #4]
    hdma_tim_pwm_ch_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800169c:	4b2d      	ldr	r3, [pc, #180]	@ (8001754 <ws2812_dma_start+0x150>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
    hdma_tim_pwm_ch_b.Init.MemInc = DMA_MINC_DISABLE;
 80016a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <ws2812_dma_start+0x150>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
    hdma_tim_pwm_ch_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <ws2812_dma_start+0x150>)
 80016aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ae:	611a      	str	r2, [r3, #16]
    hdma_tim_pwm_ch_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b0:	4b28      	ldr	r3, [pc, #160]	@ (8001754 <ws2812_dma_start+0x150>)
 80016b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016b6:	615a      	str	r2, [r3, #20]
    hdma_tim_pwm_ch_b.Init.Mode = DMA_CIRCULAR;
 80016b8:	4b26      	ldr	r3, [pc, #152]	@ (8001754 <ws2812_dma_start+0x150>)
 80016ba:	2220      	movs	r2, #32
 80016bc:	619a      	str	r2, [r3, #24]
    hdma_tim_pwm_ch_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016be:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <ws2812_dma_start+0x150>)
 80016c0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80016c4:	61da      	str	r2, [r3, #28]

    /* I don't know why, but making all DMAs run as long as the buffer size makes things more
     * efficient. Is it the extra full/half-done flags? Only the 2nd DMA needs to run for a given
     * size ...
     */
    HAL_DMA_Init(&hdma_tim_update);
 80016c6:	481f      	ldr	r0, [pc, #124]	@ (8001744 <ws2812_dma_start+0x140>)
 80016c8:	f000 ff64 	bl	8002594 <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim_pwm_ch_a);
 80016cc:	481f      	ldr	r0, [pc, #124]	@ (800174c <ws2812_dma_start+0x148>)
 80016ce:	f000 ff61 	bl	8002594 <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim_pwm_ch_b);
 80016d2:	4820      	ldr	r0, [pc, #128]	@ (8001754 <ws2812_dma_start+0x150>)
 80016d4:	f000 ff5e 	bl	8002594 <HAL_DMA_Init>

    HAL_DMA_Start(&hdma_tim_update, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BSRR, DMA_BUFFER_SIZE);
 80016d8:	4920      	ldr	r1, [pc, #128]	@ (800175c <ws2812_dma_start+0x158>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3310      	adds	r3, #16
 80016de:	461a      	mov	r2, r3
 80016e0:	2310      	movs	r3, #16
 80016e2:	4818      	ldr	r0, [pc, #96]	@ (8001744 <ws2812_dma_start+0x140>)
 80016e4:	f000 ffb0 	bl	8002648 <HAL_DMA_Start>
    HAL_DMA_Start(&hdma_tim_pwm_ch_a, (uint32_t)dma_buffer, (uint32_t) &gpio_bank->BRR, DMA_BUFFER_SIZE);
 80016e8:	491d      	ldr	r1, [pc, #116]	@ (8001760 <ws2812_dma_start+0x15c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3314      	adds	r3, #20
 80016ee:	461a      	mov	r2, r3
 80016f0:	2310      	movs	r3, #16
 80016f2:	4816      	ldr	r0, [pc, #88]	@ (800174c <ws2812_dma_start+0x148>)
 80016f4:	f000 ffa8 	bl	8002648 <HAL_DMA_Start>
    HAL_DMA_Start(&hdma_tim_pwm_ch_b, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BRR, DMA_BUFFER_SIZE);
 80016f8:	4918      	ldr	r1, [pc, #96]	@ (800175c <ws2812_dma_start+0x158>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3314      	adds	r3, #20
 80016fe:	461a      	mov	r2, r3
 8001700:	2310      	movs	r3, #16
 8001702:	4814      	ldr	r0, [pc, #80]	@ (8001754 <ws2812_dma_start+0x150>)
 8001704:	f000 ffa0 	bl	8002648 <HAL_DMA_Start>

	__HAL_TIM_ENABLE_DMA(&htimer, TIM_DMA_UPDATE);
 8001708:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <ws2812_dma_start+0x160>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <ws2812_dma_start+0x160>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001716:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer, TIM_DMA_CC_A);
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <ws2812_dma_start+0x160>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <ws2812_dma_start+0x160>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001726:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer, TIM_DMA_CC_B);
 8001728:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <ws2812_dma_start+0x160>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <ws2812_dma_start+0x160>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001736:	60da      	str	r2, [r3, #12]
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	20003330 	.word	0x20003330
 8001748:	4002001c 	.word	0x4002001c
 800174c:	20003374 	.word	0x20003374
 8001750:	40020058 	.word	0x40020058
 8001754:	200033b8 	.word	0x200033b8
 8001758:	40020080 	.word	0x40020080
 800175c:	200033fc 	.word	0x200033fc
 8001760:	20003400 	.word	0x20003400
 8001764:	200032e8 	.word	0x200032e8

08001768 <get_channel_byte>:
        ch_val = get_channel_byte(channels + ch_num, pos);  \
        UNPACK_CHANNEL(gpio_num);                           \
    }

static inline uint8_t get_channel_byte(const struct led_channel_info *channel, int pos)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
    if (WS212_ALL_CHANNELS_SAME_LENGTH || (pos < channel->length))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	da05      	bge.n	8001788 <get_channel_byte+0x20>
        return channel->framebuffer[pos];  // No ^0xff as we're no longer inverting
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	e000      	b.n	800178a <get_channel_byte+0x22>

    return 0x00;  // Ensure missing data is treated as 'off'
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <fill_dma_buffer>:

static void fill_dma_buffer(uint16_t *dest, int pos, const struct led_channel_info *channels)
{
 8001794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001798:	b087      	sub	sp, #28
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
    register uint16_t cur0 = 0, cur1 = 0, cur2 = 0, cur3 = 0, cur4 = 0, cur5 = 0, cur6 = 0, cur7 = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	f04f 0b00 	mov.w	fp, #0
 80017aa:	f04f 0a00 	mov.w	sl, #0
 80017ae:	f04f 0900 	mov.w	r9, #0
 80017b2:	f04f 0800 	mov.w	r8, #0
 80017b6:	2600      	movs	r6, #0
 80017b8:	2500      	movs	r5, #0
 80017ba:	2400      	movs	r4, #0
     * all the error checks, we don't have the headroom (at least, on an STM32F103 at 72MHz).
     *
     * If you want it to be fast, don't expect it to always be pretty.
     */
    uint8_t ch_val;
    HANDLE_CHANNEL( 0, WS2812_CH0_GPIO);
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffd2 	bl	8001768 <get_channel_byte>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]
 80017c8:	7df8      	ldrb	r0, [r7, #23]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	803b      	strh	r3, [r7, #0]
 80017ce:	46ce      	mov	lr, r9
 80017d0:	46c4      	mov	ip, r8
 80017d2:	4631      	mov	r1, r6
 80017d4:	462a      	mov	r2, r5
 80017d6:	4623      	mov	r3, r4
 80017d8:	883c      	ldrh	r4, [r7, #0]
 80017da:	4605      	mov	r5, r0
 80017dc:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 80017e0:	f360 0400 	bfi	r4, r0, #0, #1
 80017e4:	f3c5 1080 	ubfx	r0, r5, #6, #1
 80017e8:	f360 0b00 	bfi	fp, r0, #0, #1
 80017ec:	f3c5 1040 	ubfx	r0, r5, #5, #1
 80017f0:	f360 0a00 	bfi	sl, r0, #0, #1
 80017f4:	f3c5 1000 	ubfx	r0, r5, #4, #1
 80017f8:	f360 0e00 	bfi	lr, r0, #0, #1
 80017fc:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 8001800:	f360 0c00 	bfi	ip, r0, #0, #1
 8001804:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001808:	f360 0100 	bfi	r1, r0, #0, #1
 800180c:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001810:	f360 0200 	bfi	r2, r0, #0, #1
 8001814:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001818:	f360 0300 	bfi	r3, r0, #0, #1
 800181c:	b2a0      	uxth	r0, r4
 800181e:	6038      	str	r0, [r7, #0]
 8001820:	fa1f fb8b 	uxth.w	fp, fp
 8001824:	fa1f fa8a 	uxth.w	sl, sl
 8001828:	fa1f f98e 	uxth.w	r9, lr
 800182c:	fa1f f88c 	uxth.w	r8, ip
 8001830:	b28e      	uxth	r6, r1
 8001832:	b295      	uxth	r5, r2
 8001834:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL( 1, WS2812_CH1_GPIO);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3308      	adds	r3, #8
 800183a:	68b9      	ldr	r1, [r7, #8]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff93 	bl	8001768 <get_channel_byte>
 8001842:	4603      	mov	r3, r0
 8001844:	75fb      	strb	r3, [r7, #23]
 8001846:	7df8      	ldrb	r0, [r7, #23]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	803b      	strh	r3, [r7, #0]
 800184c:	46ce      	mov	lr, r9
 800184e:	46c4      	mov	ip, r8
 8001850:	4631      	mov	r1, r6
 8001852:	462a      	mov	r2, r5
 8001854:	4623      	mov	r3, r4
 8001856:	883c      	ldrh	r4, [r7, #0]
 8001858:	4605      	mov	r5, r0
 800185a:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 800185e:	f360 0441 	bfi	r4, r0, #1, #1
 8001862:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001866:	f360 0b41 	bfi	fp, r0, #1, #1
 800186a:	f3c5 1040 	ubfx	r0, r5, #5, #1
 800186e:	f360 0a41 	bfi	sl, r0, #1, #1
 8001872:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001876:	f360 0e41 	bfi	lr, r0, #1, #1
 800187a:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 800187e:	f360 0c41 	bfi	ip, r0, #1, #1
 8001882:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001886:	f360 0141 	bfi	r1, r0, #1, #1
 800188a:	f3c5 0040 	ubfx	r0, r5, #1, #1
 800188e:	f360 0241 	bfi	r2, r0, #1, #1
 8001892:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001896:	f360 0341 	bfi	r3, r0, #1, #1
 800189a:	b2a0      	uxth	r0, r4
 800189c:	6038      	str	r0, [r7, #0]
 800189e:	fa1f fb8b 	uxth.w	fp, fp
 80018a2:	fa1f fa8a 	uxth.w	sl, sl
 80018a6:	fa1f f98e 	uxth.w	r9, lr
 80018aa:	fa1f f88c 	uxth.w	r8, ip
 80018ae:	b28e      	uxth	r6, r1
 80018b0:	b295      	uxth	r5, r2
 80018b2:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL( 2, WS2812_CH2_GPIO);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3310      	adds	r3, #16
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff54 	bl	8001768 <get_channel_byte>
 80018c0:	4603      	mov	r3, r0
 80018c2:	75fb      	strb	r3, [r7, #23]
 80018c4:	7df8      	ldrb	r0, [r7, #23]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	803b      	strh	r3, [r7, #0]
 80018ca:	46ce      	mov	lr, r9
 80018cc:	46c4      	mov	ip, r8
 80018ce:	4631      	mov	r1, r6
 80018d0:	462a      	mov	r2, r5
 80018d2:	4623      	mov	r3, r4
 80018d4:	883c      	ldrh	r4, [r7, #0]
 80018d6:	4605      	mov	r5, r0
 80018d8:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 80018dc:	f360 0482 	bfi	r4, r0, #2, #1
 80018e0:	f3c5 1080 	ubfx	r0, r5, #6, #1
 80018e4:	f360 0b82 	bfi	fp, r0, #2, #1
 80018e8:	f3c5 1040 	ubfx	r0, r5, #5, #1
 80018ec:	f360 0a82 	bfi	sl, r0, #2, #1
 80018f0:	f3c5 1000 	ubfx	r0, r5, #4, #1
 80018f4:	f360 0e82 	bfi	lr, r0, #2, #1
 80018f8:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 80018fc:	f360 0c82 	bfi	ip, r0, #2, #1
 8001900:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001904:	f360 0182 	bfi	r1, r0, #2, #1
 8001908:	f3c5 0040 	ubfx	r0, r5, #1, #1
 800190c:	f360 0282 	bfi	r2, r0, #2, #1
 8001910:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001914:	f360 0382 	bfi	r3, r0, #2, #1
 8001918:	b2a0      	uxth	r0, r4
 800191a:	6038      	str	r0, [r7, #0]
 800191c:	fa1f fb8b 	uxth.w	fp, fp
 8001920:	fa1f fa8a 	uxth.w	sl, sl
 8001924:	fa1f f98e 	uxth.w	r9, lr
 8001928:	fa1f f88c 	uxth.w	r8, ip
 800192c:	b28e      	uxth	r6, r1
 800192e:	b295      	uxth	r5, r2
 8001930:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL( 3, WS2812_CH3_GPIO);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3318      	adds	r3, #24
 8001936:	68b9      	ldr	r1, [r7, #8]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff15 	bl	8001768 <get_channel_byte>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]
 8001942:	7df8      	ldrb	r0, [r7, #23]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	803b      	strh	r3, [r7, #0]
 8001948:	46ce      	mov	lr, r9
 800194a:	46c4      	mov	ip, r8
 800194c:	4631      	mov	r1, r6
 800194e:	462a      	mov	r2, r5
 8001950:	4623      	mov	r3, r4
 8001952:	883c      	ldrh	r4, [r7, #0]
 8001954:	4605      	mov	r5, r0
 8001956:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 800195a:	f360 04c3 	bfi	r4, r0, #3, #1
 800195e:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001962:	f360 0bc3 	bfi	fp, r0, #3, #1
 8001966:	f3c5 1040 	ubfx	r0, r5, #5, #1
 800196a:	f360 0ac3 	bfi	sl, r0, #3, #1
 800196e:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001972:	f360 0ec3 	bfi	lr, r0, #3, #1
 8001976:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 800197a:	f360 0cc3 	bfi	ip, r0, #3, #1
 800197e:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001982:	f360 01c3 	bfi	r1, r0, #3, #1
 8001986:	f3c5 0040 	ubfx	r0, r5, #1, #1
 800198a:	f360 02c3 	bfi	r2, r0, #3, #1
 800198e:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001992:	f360 03c3 	bfi	r3, r0, #3, #1
 8001996:	b2a0      	uxth	r0, r4
 8001998:	6038      	str	r0, [r7, #0]
 800199a:	fa1f fb8b 	uxth.w	fp, fp
 800199e:	fa1f fa8a 	uxth.w	sl, sl
 80019a2:	fa1f f98e 	uxth.w	r9, lr
 80019a6:	fa1f f88c 	uxth.w	r8, ip
 80019aa:	b28e      	uxth	r6, r1
 80019ac:	b295      	uxth	r5, r2
 80019ae:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL( 4, WS2812_CH4_GPIO);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3320      	adds	r3, #32
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fed6 	bl	8001768 <get_channel_byte>
 80019bc:	4603      	mov	r3, r0
 80019be:	75fb      	strb	r3, [r7, #23]
 80019c0:	7df8      	ldrb	r0, [r7, #23]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	803b      	strh	r3, [r7, #0]
 80019c6:	46ce      	mov	lr, r9
 80019c8:	46c4      	mov	ip, r8
 80019ca:	4631      	mov	r1, r6
 80019cc:	462a      	mov	r2, r5
 80019ce:	4623      	mov	r3, r4
 80019d0:	883c      	ldrh	r4, [r7, #0]
 80019d2:	4605      	mov	r5, r0
 80019d4:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 80019d8:	f360 1404 	bfi	r4, r0, #4, #1
 80019dc:	f3c5 1080 	ubfx	r0, r5, #6, #1
 80019e0:	f360 1b04 	bfi	fp, r0, #4, #1
 80019e4:	f3c5 1040 	ubfx	r0, r5, #5, #1
 80019e8:	f360 1a04 	bfi	sl, r0, #4, #1
 80019ec:	f3c5 1000 	ubfx	r0, r5, #4, #1
 80019f0:	f360 1e04 	bfi	lr, r0, #4, #1
 80019f4:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 80019f8:	f360 1c04 	bfi	ip, r0, #4, #1
 80019fc:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001a00:	f360 1104 	bfi	r1, r0, #4, #1
 8001a04:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001a08:	f360 1204 	bfi	r2, r0, #4, #1
 8001a0c:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001a10:	f360 1304 	bfi	r3, r0, #4, #1
 8001a14:	b2a0      	uxth	r0, r4
 8001a16:	6038      	str	r0, [r7, #0]
 8001a18:	fa1f fb8b 	uxth.w	fp, fp
 8001a1c:	fa1f fa8a 	uxth.w	sl, sl
 8001a20:	fa1f f98e 	uxth.w	r9, lr
 8001a24:	fa1f f88c 	uxth.w	r8, ip
 8001a28:	b28e      	uxth	r6, r1
 8001a2a:	b295      	uxth	r5, r2
 8001a2c:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL( 5, WS2812_CH5_GPIO);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3328      	adds	r3, #40	@ 0x28
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fe97 	bl	8001768 <get_channel_byte>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	75fb      	strb	r3, [r7, #23]
 8001a3e:	7df8      	ldrb	r0, [r7, #23]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	803b      	strh	r3, [r7, #0]
 8001a44:	46ce      	mov	lr, r9
 8001a46:	46c4      	mov	ip, r8
 8001a48:	4631      	mov	r1, r6
 8001a4a:	462a      	mov	r2, r5
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	883c      	ldrh	r4, [r7, #0]
 8001a50:	4605      	mov	r5, r0
 8001a52:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 8001a56:	f360 1445 	bfi	r4, r0, #5, #1
 8001a5a:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001a5e:	f360 1b45 	bfi	fp, r0, #5, #1
 8001a62:	f3c5 1040 	ubfx	r0, r5, #5, #1
 8001a66:	f360 1a45 	bfi	sl, r0, #5, #1
 8001a6a:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001a6e:	f360 1e45 	bfi	lr, r0, #5, #1
 8001a72:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 8001a76:	f360 1c45 	bfi	ip, r0, #5, #1
 8001a7a:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001a7e:	f360 1145 	bfi	r1, r0, #5, #1
 8001a82:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001a86:	f360 1245 	bfi	r2, r0, #5, #1
 8001a8a:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001a8e:	f360 1345 	bfi	r3, r0, #5, #1
 8001a92:	b2a0      	uxth	r0, r4
 8001a94:	6038      	str	r0, [r7, #0]
 8001a96:	fa1f fb8b 	uxth.w	fp, fp
 8001a9a:	fa1f fa8a 	uxth.w	sl, sl
 8001a9e:	fa1f f98e 	uxth.w	r9, lr
 8001aa2:	fa1f f88c 	uxth.w	r8, ip
 8001aa6:	b28e      	uxth	r6, r1
 8001aa8:	b295      	uxth	r5, r2
 8001aaa:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL( 6, WS2812_CH6_GPIO);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3330      	adds	r3, #48	@ 0x30
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fe58 	bl	8001768 <get_channel_byte>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	75fb      	strb	r3, [r7, #23]
 8001abc:	7df8      	ldrb	r0, [r7, #23]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	803b      	strh	r3, [r7, #0]
 8001ac2:	46ce      	mov	lr, r9
 8001ac4:	46c4      	mov	ip, r8
 8001ac6:	4631      	mov	r1, r6
 8001ac8:	462a      	mov	r2, r5
 8001aca:	4623      	mov	r3, r4
 8001acc:	883c      	ldrh	r4, [r7, #0]
 8001ace:	4605      	mov	r5, r0
 8001ad0:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 8001ad4:	f360 1486 	bfi	r4, r0, #6, #1
 8001ad8:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001adc:	f360 1b86 	bfi	fp, r0, #6, #1
 8001ae0:	f3c5 1040 	ubfx	r0, r5, #5, #1
 8001ae4:	f360 1a86 	bfi	sl, r0, #6, #1
 8001ae8:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001aec:	f360 1e86 	bfi	lr, r0, #6, #1
 8001af0:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 8001af4:	f360 1c86 	bfi	ip, r0, #6, #1
 8001af8:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001afc:	f360 1186 	bfi	r1, r0, #6, #1
 8001b00:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001b04:	f360 1286 	bfi	r2, r0, #6, #1
 8001b08:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001b0c:	f360 1386 	bfi	r3, r0, #6, #1
 8001b10:	b2a0      	uxth	r0, r4
 8001b12:	6038      	str	r0, [r7, #0]
 8001b14:	fa1f fb8b 	uxth.w	fp, fp
 8001b18:	fa1f fa8a 	uxth.w	sl, sl
 8001b1c:	fa1f f98e 	uxth.w	r9, lr
 8001b20:	fa1f f88c 	uxth.w	r8, ip
 8001b24:	b28e      	uxth	r6, r1
 8001b26:	b295      	uxth	r5, r2
 8001b28:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL( 7, WS2812_CH7_GPIO);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3338      	adds	r3, #56	@ 0x38
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fe19 	bl	8001768 <get_channel_byte>
 8001b36:	4603      	mov	r3, r0
 8001b38:	75fb      	strb	r3, [r7, #23]
 8001b3a:	7df8      	ldrb	r0, [r7, #23]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	803b      	strh	r3, [r7, #0]
 8001b40:	46ce      	mov	lr, r9
 8001b42:	46c4      	mov	ip, r8
 8001b44:	4631      	mov	r1, r6
 8001b46:	462a      	mov	r2, r5
 8001b48:	4623      	mov	r3, r4
 8001b4a:	883c      	ldrh	r4, [r7, #0]
 8001b4c:	4605      	mov	r5, r0
 8001b4e:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 8001b52:	f360 14c7 	bfi	r4, r0, #7, #1
 8001b56:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001b5a:	f360 1bc7 	bfi	fp, r0, #7, #1
 8001b5e:	f3c5 1040 	ubfx	r0, r5, #5, #1
 8001b62:	f360 1ac7 	bfi	sl, r0, #7, #1
 8001b66:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001b6a:	f360 1ec7 	bfi	lr, r0, #7, #1
 8001b6e:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 8001b72:	f360 1cc7 	bfi	ip, r0, #7, #1
 8001b76:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001b7a:	f360 11c7 	bfi	r1, r0, #7, #1
 8001b7e:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001b82:	f360 12c7 	bfi	r2, r0, #7, #1
 8001b86:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001b8a:	f360 13c7 	bfi	r3, r0, #7, #1
 8001b8e:	b2a0      	uxth	r0, r4
 8001b90:	6038      	str	r0, [r7, #0]
 8001b92:	fa1f fb8b 	uxth.w	fp, fp
 8001b96:	fa1f fa8a 	uxth.w	sl, sl
 8001b9a:	fa1f f98e 	uxth.w	r9, lr
 8001b9e:	fa1f f88c 	uxth.w	r8, ip
 8001ba2:	b28e      	uxth	r6, r1
 8001ba4:	b295      	uxth	r5, r2
 8001ba6:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL( 8, WS2812_CH8_GPIO);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3340      	adds	r3, #64	@ 0x40
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fdda 	bl	8001768 <get_channel_byte>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	75fb      	strb	r3, [r7, #23]
 8001bb8:	7df8      	ldrb	r0, [r7, #23]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	803b      	strh	r3, [r7, #0]
 8001bbe:	46ce      	mov	lr, r9
 8001bc0:	46c4      	mov	ip, r8
 8001bc2:	4631      	mov	r1, r6
 8001bc4:	462a      	mov	r2, r5
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	883c      	ldrh	r4, [r7, #0]
 8001bca:	4605      	mov	r5, r0
 8001bcc:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 8001bd0:	f360 2408 	bfi	r4, r0, #8, #1
 8001bd4:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001bd8:	f360 2b08 	bfi	fp, r0, #8, #1
 8001bdc:	f3c5 1040 	ubfx	r0, r5, #5, #1
 8001be0:	f360 2a08 	bfi	sl, r0, #8, #1
 8001be4:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001be8:	f360 2e08 	bfi	lr, r0, #8, #1
 8001bec:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 8001bf0:	f360 2c08 	bfi	ip, r0, #8, #1
 8001bf4:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001bf8:	f360 2108 	bfi	r1, r0, #8, #1
 8001bfc:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001c00:	f360 2208 	bfi	r2, r0, #8, #1
 8001c04:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001c08:	f360 2308 	bfi	r3, r0, #8, #1
 8001c0c:	b2a0      	uxth	r0, r4
 8001c0e:	6038      	str	r0, [r7, #0]
 8001c10:	fa1f fb8b 	uxth.w	fp, fp
 8001c14:	fa1f fa8a 	uxth.w	sl, sl
 8001c18:	fa1f f98e 	uxth.w	r9, lr
 8001c1c:	fa1f f88c 	uxth.w	r8, ip
 8001c20:	b28e      	uxth	r6, r1
 8001c22:	b295      	uxth	r5, r2
 8001c24:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL( 9, WS2812_CH9_GPIO);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3348      	adds	r3, #72	@ 0x48
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fd9b 	bl	8001768 <get_channel_byte>
 8001c32:	4603      	mov	r3, r0
 8001c34:	75fb      	strb	r3, [r7, #23]
 8001c36:	7df8      	ldrb	r0, [r7, #23]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	803b      	strh	r3, [r7, #0]
 8001c3c:	46ce      	mov	lr, r9
 8001c3e:	46c4      	mov	ip, r8
 8001c40:	4631      	mov	r1, r6
 8001c42:	462a      	mov	r2, r5
 8001c44:	4623      	mov	r3, r4
 8001c46:	883c      	ldrh	r4, [r7, #0]
 8001c48:	4605      	mov	r5, r0
 8001c4a:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 8001c4e:	f360 2449 	bfi	r4, r0, #9, #1
 8001c52:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001c56:	f360 2b49 	bfi	fp, r0, #9, #1
 8001c5a:	f3c5 1040 	ubfx	r0, r5, #5, #1
 8001c5e:	f360 2a49 	bfi	sl, r0, #9, #1
 8001c62:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001c66:	f360 2e49 	bfi	lr, r0, #9, #1
 8001c6a:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 8001c6e:	f360 2c49 	bfi	ip, r0, #9, #1
 8001c72:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001c76:	f360 2149 	bfi	r1, r0, #9, #1
 8001c7a:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001c7e:	f360 2249 	bfi	r2, r0, #9, #1
 8001c82:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001c86:	f360 2349 	bfi	r3, r0, #9, #1
 8001c8a:	b2a0      	uxth	r0, r4
 8001c8c:	6038      	str	r0, [r7, #0]
 8001c8e:	fa1f fb8b 	uxth.w	fp, fp
 8001c92:	fa1f fa8a 	uxth.w	sl, sl
 8001c96:	fa1f f98e 	uxth.w	r9, lr
 8001c9a:	fa1f f88c 	uxth.w	r8, ip
 8001c9e:	b28e      	uxth	r6, r1
 8001ca0:	b295      	uxth	r5, r2
 8001ca2:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL(10, WS2812_CH10_GPIO);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3350      	adds	r3, #80	@ 0x50
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fd5c 	bl	8001768 <get_channel_byte>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	75fb      	strb	r3, [r7, #23]
 8001cb4:	7df8      	ldrb	r0, [r7, #23]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	803b      	strh	r3, [r7, #0]
 8001cba:	46ce      	mov	lr, r9
 8001cbc:	46c4      	mov	ip, r8
 8001cbe:	4631      	mov	r1, r6
 8001cc0:	462a      	mov	r2, r5
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	883c      	ldrh	r4, [r7, #0]
 8001cc6:	4605      	mov	r5, r0
 8001cc8:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 8001ccc:	f360 248a 	bfi	r4, r0, #10, #1
 8001cd0:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001cd4:	f360 2b8a 	bfi	fp, r0, #10, #1
 8001cd8:	f3c5 1040 	ubfx	r0, r5, #5, #1
 8001cdc:	f360 2a8a 	bfi	sl, r0, #10, #1
 8001ce0:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001ce4:	f360 2e8a 	bfi	lr, r0, #10, #1
 8001ce8:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 8001cec:	f360 2c8a 	bfi	ip, r0, #10, #1
 8001cf0:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001cf4:	f360 218a 	bfi	r1, r0, #10, #1
 8001cf8:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001cfc:	f360 228a 	bfi	r2, r0, #10, #1
 8001d00:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001d04:	f360 238a 	bfi	r3, r0, #10, #1
 8001d08:	b2a0      	uxth	r0, r4
 8001d0a:	6038      	str	r0, [r7, #0]
 8001d0c:	fa1f fb8b 	uxth.w	fp, fp
 8001d10:	fa1f fa8a 	uxth.w	sl, sl
 8001d14:	fa1f f98e 	uxth.w	r9, lr
 8001d18:	fa1f f88c 	uxth.w	r8, ip
 8001d1c:	b28e      	uxth	r6, r1
 8001d1e:	b295      	uxth	r5, r2
 8001d20:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL(11, WS2812_CH11_GPIO);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3358      	adds	r3, #88	@ 0x58
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fd1d 	bl	8001768 <get_channel_byte>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	75fb      	strb	r3, [r7, #23]
 8001d32:	7df8      	ldrb	r0, [r7, #23]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	803b      	strh	r3, [r7, #0]
 8001d38:	46ce      	mov	lr, r9
 8001d3a:	46c4      	mov	ip, r8
 8001d3c:	4631      	mov	r1, r6
 8001d3e:	462a      	mov	r2, r5
 8001d40:	4623      	mov	r3, r4
 8001d42:	883c      	ldrh	r4, [r7, #0]
 8001d44:	4605      	mov	r5, r0
 8001d46:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 8001d4a:	f360 24cb 	bfi	r4, r0, #11, #1
 8001d4e:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001d52:	f360 2bcb 	bfi	fp, r0, #11, #1
 8001d56:	f3c5 1040 	ubfx	r0, r5, #5, #1
 8001d5a:	f360 2acb 	bfi	sl, r0, #11, #1
 8001d5e:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001d62:	f360 2ecb 	bfi	lr, r0, #11, #1
 8001d66:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 8001d6a:	f360 2ccb 	bfi	ip, r0, #11, #1
 8001d6e:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001d72:	f360 21cb 	bfi	r1, r0, #11, #1
 8001d76:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001d7a:	f360 22cb 	bfi	r2, r0, #11, #1
 8001d7e:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001d82:	f360 23cb 	bfi	r3, r0, #11, #1
 8001d86:	b2a0      	uxth	r0, r4
 8001d88:	6038      	str	r0, [r7, #0]
 8001d8a:	fa1f fb8b 	uxth.w	fp, fp
 8001d8e:	fa1f fa8a 	uxth.w	sl, sl
 8001d92:	fa1f f98e 	uxth.w	r9, lr
 8001d96:	fa1f f88c 	uxth.w	r8, ip
 8001d9a:	b28e      	uxth	r6, r1
 8001d9c:	b295      	uxth	r5, r2
 8001d9e:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL(12, WS2812_CH12_GPIO);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3360      	adds	r3, #96	@ 0x60
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fcde 	bl	8001768 <get_channel_byte>
 8001dac:	4603      	mov	r3, r0
 8001dae:	75fb      	strb	r3, [r7, #23]
 8001db0:	7df8      	ldrb	r0, [r7, #23]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	803b      	strh	r3, [r7, #0]
 8001db6:	46ce      	mov	lr, r9
 8001db8:	46c4      	mov	ip, r8
 8001dba:	4631      	mov	r1, r6
 8001dbc:	462a      	mov	r2, r5
 8001dbe:	4623      	mov	r3, r4
 8001dc0:	883c      	ldrh	r4, [r7, #0]
 8001dc2:	4605      	mov	r5, r0
 8001dc4:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 8001dc8:	f360 340c 	bfi	r4, r0, #12, #1
 8001dcc:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001dd0:	f360 3b0c 	bfi	fp, r0, #12, #1
 8001dd4:	f3c5 1040 	ubfx	r0, r5, #5, #1
 8001dd8:	f360 3a0c 	bfi	sl, r0, #12, #1
 8001ddc:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001de0:	f360 3e0c 	bfi	lr, r0, #12, #1
 8001de4:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 8001de8:	f360 3c0c 	bfi	ip, r0, #12, #1
 8001dec:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001df0:	f360 310c 	bfi	r1, r0, #12, #1
 8001df4:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001df8:	f360 320c 	bfi	r2, r0, #12, #1
 8001dfc:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001e00:	f360 330c 	bfi	r3, r0, #12, #1
 8001e04:	b2a0      	uxth	r0, r4
 8001e06:	6038      	str	r0, [r7, #0]
 8001e08:	fa1f fb8b 	uxth.w	fp, fp
 8001e0c:	fa1f fa8a 	uxth.w	sl, sl
 8001e10:	fa1f f98e 	uxth.w	r9, lr
 8001e14:	fa1f f88c 	uxth.w	r8, ip
 8001e18:	b28e      	uxth	r6, r1
 8001e1a:	b295      	uxth	r5, r2
 8001e1c:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL(13, WS2812_CH13_GPIO);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3368      	adds	r3, #104	@ 0x68
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fc9f 	bl	8001768 <get_channel_byte>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	75fb      	strb	r3, [r7, #23]
 8001e2e:	7df8      	ldrb	r0, [r7, #23]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	803b      	strh	r3, [r7, #0]
 8001e34:	46ce      	mov	lr, r9
 8001e36:	46c4      	mov	ip, r8
 8001e38:	4631      	mov	r1, r6
 8001e3a:	462a      	mov	r2, r5
 8001e3c:	4623      	mov	r3, r4
 8001e3e:	883c      	ldrh	r4, [r7, #0]
 8001e40:	4605      	mov	r5, r0
 8001e42:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 8001e46:	f360 344d 	bfi	r4, r0, #13, #1
 8001e4a:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001e4e:	f360 3b4d 	bfi	fp, r0, #13, #1
 8001e52:	f3c5 1040 	ubfx	r0, r5, #5, #1
 8001e56:	f360 3a4d 	bfi	sl, r0, #13, #1
 8001e5a:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001e5e:	f360 3e4d 	bfi	lr, r0, #13, #1
 8001e62:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 8001e66:	f360 3c4d 	bfi	ip, r0, #13, #1
 8001e6a:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001e6e:	f360 314d 	bfi	r1, r0, #13, #1
 8001e72:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001e76:	f360 324d 	bfi	r2, r0, #13, #1
 8001e7a:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001e7e:	f360 334d 	bfi	r3, r0, #13, #1
 8001e82:	b2a0      	uxth	r0, r4
 8001e84:	6038      	str	r0, [r7, #0]
 8001e86:	fa1f fb8b 	uxth.w	fp, fp
 8001e8a:	fa1f fa8a 	uxth.w	sl, sl
 8001e8e:	fa1f f98e 	uxth.w	r9, lr
 8001e92:	fa1f f88c 	uxth.w	r8, ip
 8001e96:	b28e      	uxth	r6, r1
 8001e98:	b295      	uxth	r5, r2
 8001e9a:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL(14, WS2812_CH14_GPIO);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3370      	adds	r3, #112	@ 0x70
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fc60 	bl	8001768 <get_channel_byte>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	75fb      	strb	r3, [r7, #23]
 8001eac:	7df8      	ldrb	r0, [r7, #23]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	803b      	strh	r3, [r7, #0]
 8001eb2:	46ce      	mov	lr, r9
 8001eb4:	46c4      	mov	ip, r8
 8001eb6:	4631      	mov	r1, r6
 8001eb8:	462a      	mov	r2, r5
 8001eba:	4623      	mov	r3, r4
 8001ebc:	883c      	ldrh	r4, [r7, #0]
 8001ebe:	4605      	mov	r5, r0
 8001ec0:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 8001ec4:	f360 348e 	bfi	r4, r0, #14, #1
 8001ec8:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001ecc:	f360 3b8e 	bfi	fp, r0, #14, #1
 8001ed0:	f3c5 1040 	ubfx	r0, r5, #5, #1
 8001ed4:	f360 3a8e 	bfi	sl, r0, #14, #1
 8001ed8:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001edc:	f360 3e8e 	bfi	lr, r0, #14, #1
 8001ee0:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 8001ee4:	f360 3c8e 	bfi	ip, r0, #14, #1
 8001ee8:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001eec:	f360 318e 	bfi	r1, r0, #14, #1
 8001ef0:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001ef4:	f360 328e 	bfi	r2, r0, #14, #1
 8001ef8:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001efc:	f360 338e 	bfi	r3, r0, #14, #1
 8001f00:	b2a0      	uxth	r0, r4
 8001f02:	6038      	str	r0, [r7, #0]
 8001f04:	fa1f fb8b 	uxth.w	fp, fp
 8001f08:	fa1f fa8a 	uxth.w	sl, sl
 8001f0c:	fa1f f98e 	uxth.w	r9, lr
 8001f10:	fa1f f88c 	uxth.w	r8, ip
 8001f14:	b28e      	uxth	r6, r1
 8001f16:	b295      	uxth	r5, r2
 8001f18:	b29c      	uxth	r4, r3
    HANDLE_CHANNEL(15, WS2812_CH15_GPIO);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3378      	adds	r3, #120	@ 0x78
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fc21 	bl	8001768 <get_channel_byte>
 8001f26:	4603      	mov	r3, r0
 8001f28:	75fb      	strb	r3, [r7, #23]
 8001f2a:	7df8      	ldrb	r0, [r7, #23]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	803b      	strh	r3, [r7, #0]
 8001f30:	46ce      	mov	lr, r9
 8001f32:	46c4      	mov	ip, r8
 8001f34:	4631      	mov	r1, r6
 8001f36:	462a      	mov	r2, r5
 8001f38:	4623      	mov	r3, r4
 8001f3a:	883c      	ldrh	r4, [r7, #0]
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 8001f42:	f360 34cf 	bfi	r4, r0, #15, #1
 8001f46:	f3c5 1080 	ubfx	r0, r5, #6, #1
 8001f4a:	f360 3bcf 	bfi	fp, r0, #15, #1
 8001f4e:	f3c5 1040 	ubfx	r0, r5, #5, #1
 8001f52:	f360 3acf 	bfi	sl, r0, #15, #1
 8001f56:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8001f5a:	f360 3ecf 	bfi	lr, r0, #15, #1
 8001f5e:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 8001f62:	f360 3ccf 	bfi	ip, r0, #15, #1
 8001f66:	f3c5 0080 	ubfx	r0, r5, #2, #1
 8001f6a:	f360 31cf 	bfi	r1, r0, #15, #1
 8001f6e:	f3c5 0040 	ubfx	r0, r5, #1, #1
 8001f72:	f360 32cf 	bfi	r2, r0, #15, #1
 8001f76:	f3c5 0000 	ubfx	r0, r5, #0, #1
 8001f7a:	f360 33cf 	bfi	r3, r0, #15, #1
 8001f7e:	b2a0      	uxth	r0, r4
 8001f80:	fa1f fb8b 	uxth.w	fp, fp
 8001f84:	fa1f fa8a 	uxth.w	sl, sl
 8001f88:	fa1f f98e 	uxth.w	r9, lr
 8001f8c:	fa1f f88c 	uxth.w	r8, ip
 8001f90:	b28e      	uxth	r6, r1
 8001f92:	b295      	uxth	r5, r2
 8001f94:	b29c      	uxth	r4, r3

    /*
     * Store the repacked bits in our DMA buffer, ready to be sent to the GPIO bit-reset register.
     * cur0-cur7 represents bits0 - bits7 of all our channels. Each bit within curX is one channel.
     */
    dest[0] = cur0;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4602      	mov	r2, r0
 8001f9a:	801a      	strh	r2, [r3, #0]
    dest[1] = cur1;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	465a      	mov	r2, fp
 8001fa2:	801a      	strh	r2, [r3, #0]
    dest[2] = cur2;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	4652      	mov	r2, sl
 8001faa:	801a      	strh	r2, [r3, #0]
    dest[3] = cur3;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3306      	adds	r3, #6
 8001fb0:	464a      	mov	r2, r9
 8001fb2:	801a      	strh	r2, [r3, #0]
    dest[4] = cur4;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	4642      	mov	r2, r8
 8001fba:	801a      	strh	r2, [r3, #0]
    dest[5] = cur5;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	330a      	adds	r3, #10
 8001fc0:	4632      	mov	r2, r6
 8001fc2:	801a      	strh	r2, [r3, #0]
    dest[6] = cur6;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	462a      	mov	r2, r5
 8001fca:	801a      	strh	r2, [r3, #0]
    dest[7] = cur7;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	330e      	adds	r3, #14
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	801a      	strh	r2, [r3, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001fe0 <ws2812_refresh>:

void ws2812_refresh(const struct led_channel_info *channels, GPIO_TypeDef *gpio_bank)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
    int cycles = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
    int i;
    int pos = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
    int max_length = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]

    /* This is what gets DMAed to the GPIO BSR / BSRR at the start/end of each bit cycle.
     * We will dynamically build this shortly
     */
    ws2812_gpio_set_bits = 0;
 8001ff6:	4b80      	ldr	r3, [pc, #512]	@ (80021f8 <ws2812_refresh+0x218>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	801a      	strh	r2, [r3, #0]

    /* Pre-fill the DMA buffer, because we won't start filling things on-the-fly until the first
     * half has already been transferred.
     */
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	e00e      	b.n	8002020 <ws2812_refresh+0x40>
        fill_dma_buffer(dma_buffer + i, pos, channels);
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4a7d      	ldr	r2, [pc, #500]	@ (80021fc <ws2812_refresh+0x21c>)
 8002008:	4413      	add	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6979      	ldr	r1, [r7, #20]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fbc0 	bl	8001794 <fill_dma_buffer>
        pos++;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3301      	adds	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	3308      	adds	r3, #8
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b0f      	cmp	r3, #15
 8002024:	dded      	ble.n	8002002 <ws2812_refresh+0x22>

    /* Go through the channel list, figure out which channels are used, and set up the GPIO set/
     * reset bit masks. While we're at it, find the length of the longest framebuffer, in case
     * they're of unequal length. This determines how many total bits we will clock out.
     */
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	e027      	b.n	800207c <ws2812_refresh+0x9c>
        if (channels[i].length > max_length)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	429a      	cmp	r2, r3
 800203a:	da05      	bge.n	8002048 <ws2812_refresh+0x68>
            max_length = channels[i].length;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	613b      	str	r3, [r7, #16]

        if (channels[i].length != 0)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00f      	beq.n	8002076 <ws2812_refresh+0x96>
            ws2812_gpio_set_bits |= (1 << ws2812_channel_gpio_map[i]);
 8002056:	4a6a      	ldr	r2, [pc, #424]	@ (8002200 <ws2812_refresh+0x220>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	4413      	add	r3, r2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	2301      	movs	r3, #1
 8002062:	4093      	lsls	r3, r2
 8002064:	b21a      	sxth	r2, r3
 8002066:	4b64      	ldr	r3, [pc, #400]	@ (80021f8 <ws2812_refresh+0x218>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b21b      	sxth	r3, r3
 800206c:	4313      	orrs	r3, r2
 800206e:	b21b      	sxth	r3, r3
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b61      	ldr	r3, [pc, #388]	@ (80021f8 <ws2812_refresh+0x218>)
 8002074:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	3301      	adds	r3, #1
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b0f      	cmp	r3, #15
 8002080:	ddd4      	ble.n	800202c <ws2812_refresh+0x4c>
    }

    /* Give DMA time to finish out the current buffer, before turning it off, plus an extra blank pixel (24 bits) */
    max_length += DMA_BUFFER_SIZE / 8;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	3302      	adds	r3, #2
 8002086:	613b      	str	r3, [r7, #16]

    /* If per-channel range checks are enabled, add an extra "dummy" pixel to the end of our data stream.
     * This must only be done with range checks enabled, or we'll walk off the end of our framebuffers.
     */
#if !WS212_ALL_CHANNELS_SAME_LENGTH
    max_length += 3;
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	3303      	adds	r3, #3
 800208c:	613b      	str	r3, [r7, #16]
#endif

    /* We're going to use our standard timer to generate the RESET pulse, so for now just run the
     * timer without any DMA.
     */
	__HAL_TIM_DISABLE_DMA(&htimer, TIM_DMA_UPDATE);
 800208e:	4b5d      	ldr	r3, [pc, #372]	@ (8002204 <ws2812_refresh+0x224>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	4b5b      	ldr	r3, [pc, #364]	@ (8002204 <ws2812_refresh+0x224>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800209c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer, TIM_DMA_CC_A);
 800209e:	4b59      	ldr	r3, [pc, #356]	@ (8002204 <ws2812_refresh+0x224>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	4b57      	ldr	r3, [pc, #348]	@ (8002204 <ws2812_refresh+0x224>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020ac:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer, TIM_DMA_CC_B);
 80020ae:	4b55      	ldr	r3, [pc, #340]	@ (8002204 <ws2812_refresh+0x224>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <ws2812_refresh+0x224>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020bc:	60da      	str	r2, [r3, #12]

    __HAL_TIM_DISABLE(&htimer);
 80020be:	4b51      	ldr	r3, [pc, #324]	@ (8002204 <ws2812_refresh+0x224>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6a1a      	ldr	r2, [r3, #32]
 80020c4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10f      	bne.n	80020ee <ws2812_refresh+0x10e>
 80020ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002204 <ws2812_refresh+0x224>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6a1a      	ldr	r2, [r3, #32]
 80020d4:	f240 4344 	movw	r3, #1092	@ 0x444
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d107      	bne.n	80020ee <ws2812_refresh+0x10e>
 80020de:	4b49      	ldr	r3, [pc, #292]	@ (8002204 <ws2812_refresh+0x224>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <ws2812_refresh+0x224>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs to 0, to begin reset pulse */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 80020ee:	4b42      	ldr	r3, [pc, #264]	@ (80021f8 <ws2812_refresh+0x218>)
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	615a      	str	r2, [r3, #20]

    __HAL_TIM_ENABLE(&htimer);
 80020f8:	4b42      	ldr	r3, [pc, #264]	@ (8002204 <ws2812_refresh+0x224>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b41      	ldr	r3, [pc, #260]	@ (8002204 <ws2812_refresh+0x224>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

    /* We know the timer overflows every 1.25uS (our bit-time interval). So rather than
     * reprogram the timer for 280uS (reset pulse duration) and back, we're gonna be lazy
     * and just count out ~225 update intervals
     */
    for (i = 0; i < 225; i++) {
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	e00f      	b.n	800212e <ws2812_refresh+0x14e>
        while (!__HAL_TIM_GET_FLAG(&htimer, TIM_FLAG_UPDATE));
 800210e:	bf00      	nop
 8002110:	4b3c      	ldr	r3, [pc, #240]	@ (8002204 <ws2812_refresh+0x224>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d1f8      	bne.n	8002110 <ws2812_refresh+0x130>
        __HAL_TIM_CLEAR_FLAG(&htimer, TIM_FLAG_UPDATE);
 800211e:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <ws2812_refresh+0x224>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f06f 0201 	mvn.w	r2, #1
 8002126:	611a      	str	r2, [r3, #16]
    for (i = 0; i < 225; i++) {
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	3301      	adds	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2be0      	cmp	r3, #224	@ 0xe0
 8002132:	ddec      	ble.n	800210e <ws2812_refresh+0x12e>
    }

    /* Now that we're done with the RESET pulse, turn off the timer and prepare the DMA stuff */
    __HAL_TIM_DISABLE(&htimer);
 8002134:	4b33      	ldr	r3, [pc, #204]	@ (8002204 <ws2812_refresh+0x224>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a1a      	ldr	r2, [r3, #32]
 800213a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10f      	bne.n	8002164 <ws2812_refresh+0x184>
 8002144:	4b2f      	ldr	r3, [pc, #188]	@ (8002204 <ws2812_refresh+0x224>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6a1a      	ldr	r2, [r3, #32]
 800214a:	f240 4344 	movw	r3, #1092	@ 0x444
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <ws2812_refresh+0x184>
 8002154:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <ws2812_refresh+0x224>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <ws2812_refresh+0x224>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
    ws2812_dma_start(gpio_bank);
 8002164:	6838      	ldr	r0, [r7, #0]
 8002166:	f7ff fa4d 	bl	8001604 <ws2812_dma_start>

    /* We set the timer to juuust before the overflow condition, so that the UPDATE event happens
     * before the CH1 / CH2 match events. We want this so that the UPDATE event gives us a clean
     * starting "high" level for the first edge of the first bit.
     */
    __HAL_TIM_SET_COUNTER(&htimer, __HAL_TIM_GET_AUTORELOAD(&htimer) - 10);
 800216a:	4b26      	ldr	r3, [pc, #152]	@ (8002204 <ws2812_refresh+0x224>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002170:	4b24      	ldr	r3, [pc, #144]	@ (8002204 <ws2812_refresh+0x224>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3a0a      	subs	r2, #10
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Clear the DMA transfer status flags for the DMA we're using */
    DMA1->IFCR = DMA_TIM_CH_A_ICFR_FLAGS;
 8002178:	4b23      	ldr	r3, [pc, #140]	@ (8002208 <ws2812_refresh+0x228>)
 800217a:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 800217e:	605a      	str	r2, [r3, #4]

    /* Enable the timer.... and so it begins */
    __HAL_TIM_ENABLE(&htimer);
 8002180:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <ws2812_refresh+0x224>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b1f      	ldr	r3, [pc, #124]	@ (8002204 <ws2812_refresh+0x224>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

    while(1) {
        /* Wait for DMA full-transfer or half-transfer event. This tells us when to fill the next buffer */
        if (!(DMA1->ISR & (DMA_TIM_CH_A_TCIF | DMA_TIM_CH_A_HTIF))) {
 8002190:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <ws2812_refresh+0x228>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d103      	bne.n	80021a4 <ws2812_refresh+0x1c4>
            cycles++;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	3301      	adds	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
            continue;
 80021a2:	e027      	b.n	80021f4 <ws2812_refresh+0x214>
        }

        uint16_t *dest = dma_buffer;
 80021a4:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <ws2812_refresh+0x21c>)
 80021a6:	60fb      	str	r3, [r7, #12]

        /* Figure out if we're filling the first half of the DMA buffer, or the second half */
        if (DMA1->ISR & DMA_TIM_CH_A_TCIF)
 80021a8:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <ws2812_refresh+0x228>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <ws2812_refresh+0x1da>
            dest += DMA_BUFFER_FILL_SIZE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3310      	adds	r3, #16
 80021b8:	60fb      	str	r3, [r7, #12]

        /* Clear DMA event flags */
        DMA1->IFCR = DMA_TIM_CH_A_ICFR_FLAGS;
 80021ba:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <ws2812_refresh+0x228>)
 80021bc:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80021c0:	605a      	str	r2, [r3, #4]

        /* Unpack one new byte from each channel, into eight words in our DMA buffer
         * Each 16-bit word in the DMA buffer contains to one bit of the output byte (from each channel)
         */
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	e00e      	b.n	80021e6 <ws2812_refresh+0x206>
            fill_dma_buffer(dest + i, pos, channels);
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6979      	ldr	r1, [r7, #20]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fadd 	bl	8001794 <fill_dma_buffer>
            pos++;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	3308      	adds	r3, #8
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2b07      	cmp	r3, #7
 80021ea:	dded      	ble.n	80021c8 <ws2812_refresh+0x1e8>
        }

        if (pos > max_length)
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	dc0b      	bgt.n	800220c <ws2812_refresh+0x22c>
    while(1) {
 80021f4:	e7cc      	b.n	8002190 <ws2812_refresh+0x1b0>
 80021f6:	bf00      	nop
 80021f8:	200033fc 	.word	0x200033fc
 80021fc:	20003400 	.word	0x20003400
 8002200:	08003ea4 	.word	0x08003ea4
 8002204:	200032e8 	.word	0x200032e8
 8002208:	40020000 	.word	0x40020000
            break;
 800220c:	bf00      	nop
    }

    __HAL_TIM_DISABLE(&htimer);
 800220e:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <ws2812_refresh+0x2a0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a1a      	ldr	r2, [r3, #32]
 8002214:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <ws2812_refresh+0x25e>
 800221e:	4b18      	ldr	r3, [pc, #96]	@ (8002280 <ws2812_refresh+0x2a0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a1a      	ldr	r2, [r3, #32]
 8002224:	f240 4344 	movw	r3, #1092	@ 0x444
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d107      	bne.n	800223e <ws2812_refresh+0x25e>
 800222e:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <ws2812_refresh+0x2a0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <ws2812_refresh+0x2a0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs back to 0 */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 800223e:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <ws2812_refresh+0x2a4>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	615a      	str	r2, [r3, #20]

	__HAL_DMA_DISABLE(&hdma_tim_update);
 8002248:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <ws2812_refresh+0x2a8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <ws2812_refresh+0x2a8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim_pwm_ch_a);
 8002258:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <ws2812_refresh+0x2ac>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <ws2812_refresh+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim_pwm_ch_b);
 8002268:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <ws2812_refresh+0x2b0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <ws2812_refresh+0x2b0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
}
 8002278:	bf00      	nop
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200032e8 	.word	0x200032e8
 8002284:	200033fc 	.word	0x200033fc
 8002288:	20003330 	.word	0x20003330
 800228c:	20003374 	.word	0x20003374
 8002290:	200033b8 	.word	0x200033b8

08002294 <ws2812_init>:

void ws2812_init()
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800229a:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <ws2812_init+0x48>)
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	4a0f      	ldr	r2, [pc, #60]	@ (80022dc <ws2812_init+0x48>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6153      	str	r3, [r2, #20]
 80022a6:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <ws2812_init+0x48>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA_IRQ_TIM_UP, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	200c      	movs	r0, #12
 80022b8:	f000 f943 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA_IRQ_TIM_CH_A, 0, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	200f      	movs	r0, #15
 80022c2:	f000 f93e 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA_IRQ_TIM_CH_B, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	2011      	movs	r0, #17
 80022cc:	f000 f939 	bl	8002542 <HAL_NVIC_SetPriority>

    ws2812_timer_init();
 80022d0:	f7ff f924 	bl	800151c <ws2812_timer_init>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000

080022e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022e0:	f7ff f916 	bl	8001510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e4:	480b      	ldr	r0, [pc, #44]	@ (8002314 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022e6:	490c      	ldr	r1, [pc, #48]	@ (8002318 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022e8:	4a0c      	ldr	r2, [pc, #48]	@ (800231c <LoopFillZerobss+0x16>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022fc:	4c09      	ldr	r4, [pc, #36]	@ (8002324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800230a:	f001 fcab 	bl	8003c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800230e:	f7fe fa51 	bl	80007b4 <main>
  bx lr
 8002312:	4770      	bx	lr
  ldr r0, =_sdata
 8002314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002318:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800231c:	08003ed8 	.word	0x08003ed8
  ldr r2, =_sbss
 8002320:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002324:	20003424 	.word	0x20003424

08002328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002328:	e7fe      	b.n	8002328 <ADC1_2_IRQHandler>
	...

0800232c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002330:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <HAL_Init+0x28>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a07      	ldr	r2, [pc, #28]	@ (8002354 <HAL_Init+0x28>)
 8002336:	f043 0310 	orr.w	r3, r3, #16
 800233a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233c:	2003      	movs	r0, #3
 800233e:	f000 f8f5 	bl	800252c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002342:	2000      	movs	r0, #0
 8002344:	f000 f808 	bl	8002358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002348:	f7fe ffe0 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40022000 	.word	0x40022000

08002358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002360:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_InitTick+0x54>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <HAL_InitTick+0x58>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800236e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002372:	fbb2 f3f3 	udiv	r3, r2, r3
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f8ff 	bl	800257a <HAL_SYSTICK_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e00e      	b.n	80023a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b0f      	cmp	r3, #15
 800238a:	d80a      	bhi.n	80023a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238c:	2200      	movs	r2, #0
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f000 f8d5 	bl	8002542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002398:	4a06      	ldr	r2, [pc, #24]	@ (80023b4 <HAL_InitTick+0x5c>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e000      	b.n	80023a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000008 	.word	0x20000008
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return uwTick;
 80023bc:	4b02      	ldr	r3, [pc, #8]	@ (80023c8 <HAL_GetTick+0x10>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	20003420 	.word	0x20003420

080023cc <__NVIC_SetPriorityGrouping>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023e8:	4013      	ands	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fe:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	60d3      	str	r3, [r2, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_GetPriorityGrouping>:
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002418:	4b04      	ldr	r3, [pc, #16]	@ (800242c <__NVIC_GetPriorityGrouping+0x18>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	f003 0307 	and.w	r3, r3, #7
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	@ (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	@ (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	@ 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
         );
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	@ 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f8:	d301      	bcc.n	80024fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00f      	b.n	800251e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <SysTick_Config+0x40>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002506:	210f      	movs	r1, #15
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f7ff ff90 	bl	8002430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002510:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <SysTick_Config+0x40>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002516:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <SysTick_Config+0x40>)
 8002518:	2207      	movs	r2, #7
 800251a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	e000e010 	.word	0xe000e010

0800252c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff49 	bl	80023cc <__NVIC_SetPriorityGrouping>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002554:	f7ff ff5e 	bl	8002414 <__NVIC_GetPriorityGrouping>
 8002558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7ff ff90 	bl	8002484 <NVIC_EncodePriority>
 8002564:	4602      	mov	r2, r0
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff5f 	bl	8002430 <__NVIC_SetPriority>
}
 8002572:	bf00      	nop
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ffb0 	bl	80024e8 <SysTick_Config>
 8002588:	4603      	mov	r3, r0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e043      	b.n	8002632 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b22      	ldr	r3, [pc, #136]	@ (800263c <HAL_DMA_Init+0xa8>)
 80025b2:	4413      	add	r3, r2
 80025b4:	4a22      	ldr	r2, [pc, #136]	@ (8002640 <HAL_DMA_Init+0xac>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	009a      	lsls	r2, r3, #2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002644 <HAL_DMA_Init+0xb0>)
 80025c6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80025e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	bffdfff8 	.word	0xbffdfff8
 8002640:	cccccccd 	.word	0xcccccccd
 8002644:	40020000 	.word	0x40020000

08002648 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_DMA_Start+0x20>
 8002664:	2302      	movs	r3, #2
 8002666:	e02e      	b.n	80026c6 <HAL_DMA_Start+0x7e>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d11d      	bne.n	80026b8 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	639a      	str	r2, [r3, #56]	@ 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f814 	bl	80026ce <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e005      	b.n	80026c4 <HAL_DMA_Start+0x7c>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 80026c0:	2302      	movs	r3, #2
 80026c2:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b085      	sub	sp, #20
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e4:	2101      	movs	r1, #1
 80026e6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ea:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d108      	bne.n	800270e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800270c:	e007      	b.n	800271e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	60da      	str	r2, [r3, #12]
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b08b      	sub	sp, #44	@ 0x2c
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	e169      	b.n	8002a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800273c:	2201      	movs	r2, #1
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8158 	bne.w	8002a0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a9a      	ldr	r2, [pc, #616]	@ (80029c8 <HAL_GPIO_Init+0x2a0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d05e      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002764:	4a98      	ldr	r2, [pc, #608]	@ (80029c8 <HAL_GPIO_Init+0x2a0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d875      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800276a:	4a98      	ldr	r2, [pc, #608]	@ (80029cc <HAL_GPIO_Init+0x2a4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d058      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002770:	4a96      	ldr	r2, [pc, #600]	@ (80029cc <HAL_GPIO_Init+0x2a4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d86f      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 8002776:	4a96      	ldr	r2, [pc, #600]	@ (80029d0 <HAL_GPIO_Init+0x2a8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d052      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 800277c:	4a94      	ldr	r2, [pc, #592]	@ (80029d0 <HAL_GPIO_Init+0x2a8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d869      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 8002782:	4a94      	ldr	r2, [pc, #592]	@ (80029d4 <HAL_GPIO_Init+0x2ac>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d04c      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002788:	4a92      	ldr	r2, [pc, #584]	@ (80029d4 <HAL_GPIO_Init+0x2ac>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d863      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800278e:	4a92      	ldr	r2, [pc, #584]	@ (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d046      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002794:	4a90      	ldr	r2, [pc, #576]	@ (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d85d      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800279a:	2b12      	cmp	r3, #18
 800279c:	d82a      	bhi.n	80027f4 <HAL_GPIO_Init+0xcc>
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d859      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 80027a2:	a201      	add	r2, pc, #4	@ (adr r2, 80027a8 <HAL_GPIO_Init+0x80>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	08002823 	.word	0x08002823
 80027ac:	080027fd 	.word	0x080027fd
 80027b0:	0800280f 	.word	0x0800280f
 80027b4:	08002851 	.word	0x08002851
 80027b8:	08002857 	.word	0x08002857
 80027bc:	08002857 	.word	0x08002857
 80027c0:	08002857 	.word	0x08002857
 80027c4:	08002857 	.word	0x08002857
 80027c8:	08002857 	.word	0x08002857
 80027cc:	08002857 	.word	0x08002857
 80027d0:	08002857 	.word	0x08002857
 80027d4:	08002857 	.word	0x08002857
 80027d8:	08002857 	.word	0x08002857
 80027dc:	08002857 	.word	0x08002857
 80027e0:	08002857 	.word	0x08002857
 80027e4:	08002857 	.word	0x08002857
 80027e8:	08002857 	.word	0x08002857
 80027ec:	08002805 	.word	0x08002805
 80027f0:	08002819 	.word	0x08002819
 80027f4:	4a79      	ldr	r2, [pc, #484]	@ (80029dc <HAL_GPIO_Init+0x2b4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027fa:	e02c      	b.n	8002856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	623b      	str	r3, [r7, #32]
          break;
 8002802:	e029      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	3304      	adds	r3, #4
 800280a:	623b      	str	r3, [r7, #32]
          break;
 800280c:	e024      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	3308      	adds	r3, #8
 8002814:	623b      	str	r3, [r7, #32]
          break;
 8002816:	e01f      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	330c      	adds	r3, #12
 800281e:	623b      	str	r3, [r7, #32]
          break;
 8002820:	e01a      	b.n	8002858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800282a:	2304      	movs	r3, #4
 800282c:	623b      	str	r3, [r7, #32]
          break;
 800282e:	e013      	b.n	8002858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002838:	2308      	movs	r3, #8
 800283a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	611a      	str	r2, [r3, #16]
          break;
 8002842:	e009      	b.n	8002858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002844:	2308      	movs	r3, #8
 8002846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	615a      	str	r2, [r3, #20]
          break;
 800284e:	e003      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002850:	2300      	movs	r3, #0
 8002852:	623b      	str	r3, [r7, #32]
          break;
 8002854:	e000      	b.n	8002858 <HAL_GPIO_Init+0x130>
          break;
 8002856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2bff      	cmp	r3, #255	@ 0xff
 800285c:	d801      	bhi.n	8002862 <HAL_GPIO_Init+0x13a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	e001      	b.n	8002866 <HAL_GPIO_Init+0x13e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2bff      	cmp	r3, #255	@ 0xff
 800286c:	d802      	bhi.n	8002874 <HAL_GPIO_Init+0x14c>
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	e002      	b.n	800287a <HAL_GPIO_Init+0x152>
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	3b08      	subs	r3, #8
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	210f      	movs	r1, #15
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	401a      	ands	r2, r3
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	431a      	orrs	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80b1 	beq.w	8002a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028a8:	4b4d      	ldr	r3, [pc, #308]	@ (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	4a4c      	ldr	r2, [pc, #304]	@ (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b4a      	ldr	r3, [pc, #296]	@ (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028c0:	4a48      	ldr	r2, [pc, #288]	@ (80029e4 <HAL_GPIO_Init+0x2bc>)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	3302      	adds	r3, #2
 80028c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	220f      	movs	r2, #15
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a40      	ldr	r2, [pc, #256]	@ (80029e8 <HAL_GPIO_Init+0x2c0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <HAL_GPIO_Init+0x1ec>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3f      	ldr	r2, [pc, #252]	@ (80029ec <HAL_GPIO_Init+0x2c4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00d      	beq.n	8002910 <HAL_GPIO_Init+0x1e8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a3e      	ldr	r2, [pc, #248]	@ (80029f0 <HAL_GPIO_Init+0x2c8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d007      	beq.n	800290c <HAL_GPIO_Init+0x1e4>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3d      	ldr	r2, [pc, #244]	@ (80029f4 <HAL_GPIO_Init+0x2cc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d101      	bne.n	8002908 <HAL_GPIO_Init+0x1e0>
 8002904:	2303      	movs	r3, #3
 8002906:	e006      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 8002908:	2304      	movs	r3, #4
 800290a:	e004      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 800290c:	2302      	movs	r3, #2
 800290e:	e002      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 8002914:	2300      	movs	r3, #0
 8002916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002918:	f002 0203 	and.w	r2, r2, #3
 800291c:	0092      	lsls	r2, r2, #2
 800291e:	4093      	lsls	r3, r2
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002926:	492f      	ldr	r1, [pc, #188]	@ (80029e4 <HAL_GPIO_Init+0x2bc>)
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002940:	4b2d      	ldr	r3, [pc, #180]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	492c      	ldr	r1, [pc, #176]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	608b      	str	r3, [r1, #8]
 800294c:	e006      	b.n	800295c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800294e:	4b2a      	ldr	r3, [pc, #168]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	43db      	mvns	r3, r3
 8002956:	4928      	ldr	r1, [pc, #160]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002958:	4013      	ands	r3, r2
 800295a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d006      	beq.n	8002976 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002968:	4b23      	ldr	r3, [pc, #140]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	4922      	ldr	r1, [pc, #136]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	60cb      	str	r3, [r1, #12]
 8002974:	e006      	b.n	8002984 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002976:	4b20      	ldr	r3, [pc, #128]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	43db      	mvns	r3, r3
 800297e:	491e      	ldr	r1, [pc, #120]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002980:	4013      	ands	r3, r2
 8002982:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002990:	4b19      	ldr	r3, [pc, #100]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4918      	ldr	r1, [pc, #96]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800299e:	4b16      	ldr	r3, [pc, #88]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	4914      	ldr	r1, [pc, #80]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d021      	beq.n	80029fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029b8:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	490e      	ldr	r1, [pc, #56]	@ (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
 80029c4:	e021      	b.n	8002a0a <HAL_GPIO_Init+0x2e2>
 80029c6:	bf00      	nop
 80029c8:	10320000 	.word	0x10320000
 80029cc:	10310000 	.word	0x10310000
 80029d0:	10220000 	.word	0x10220000
 80029d4:	10210000 	.word	0x10210000
 80029d8:	10120000 	.word	0x10120000
 80029dc:	10110000 	.word	0x10110000
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40010800 	.word	0x40010800
 80029ec:	40010c00 	.word	0x40010c00
 80029f0:	40011000 	.word	0x40011000
 80029f4:	40011400 	.word	0x40011400
 80029f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_GPIO_Init+0x304>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	4909      	ldr	r1, [pc, #36]	@ (8002a2c <HAL_GPIO_Init+0x304>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f47f ae8e 	bne.w	800273c <HAL_GPIO_Init+0x14>
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	372c      	adds	r7, #44	@ 0x2c
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	40010400 	.word	0x40010400

08002a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a40:	787b      	ldrb	r3, [r7, #1]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a4c:	e003      	b.n	8002a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	041a      	lsls	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e272      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8087 	beq.w	8002b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a80:	4b92      	ldr	r3, [pc, #584]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d00c      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d112      	bne.n	8002abe <HAL_RCC_OscConfig+0x5e>
 8002a98:	4b8c      	ldr	r3, [pc, #560]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa4:	d10b      	bne.n	8002abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa6:	4b89      	ldr	r3, [pc, #548]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d06c      	beq.n	8002b8c <HAL_RCC_OscConfig+0x12c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d168      	bne.n	8002b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e24c      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x76>
 8002ac8:	4b80      	ldr	r3, [pc, #512]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a7f      	ldr	r2, [pc, #508]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	e02e      	b.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x98>
 8002ade:	4b7b      	ldr	r3, [pc, #492]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7a      	ldr	r2, [pc, #488]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b78      	ldr	r3, [pc, #480]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a77      	ldr	r2, [pc, #476]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e01d      	b.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0xbc>
 8002b02:	4b72      	ldr	r3, [pc, #456]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a71      	ldr	r2, [pc, #452]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6e      	ldr	r2, [pc, #440]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a6a      	ldr	r2, [pc, #424]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b68      	ldr	r3, [pc, #416]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a67      	ldr	r2, [pc, #412]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff fc3c 	bl	80023b8 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7ff fc38 	bl	80023b8 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	@ 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e200      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0xe4>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7ff fc28 	bl	80023b8 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7ff fc24 	bl	80023b8 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1ec      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x10c>
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d063      	beq.n	8002c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ba6:	4b49      	ldr	r3, [pc, #292]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d11c      	bne.n	8002bec <HAL_RCC_OscConfig+0x18c>
 8002bb2:	4b46      	ldr	r3, [pc, #280]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d116      	bne.n	8002bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	4b43      	ldr	r3, [pc, #268]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x176>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e1c0      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4939      	ldr	r1, [pc, #228]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	e03a      	b.n	8002c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf4:	4b36      	ldr	r3, [pc, #216]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7ff fbdd 	bl	80023b8 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c02:	f7ff fbd9 	bl	80023b8 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e1a1      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	4b2d      	ldr	r3, [pc, #180]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4927      	ldr	r1, [pc, #156]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]
 8002c34:	e015      	b.n	8002c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b26      	ldr	r3, [pc, #152]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7ff fbbc 	bl	80023b8 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7ff fbb8 	bl	80023b8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e180      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d03a      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d019      	beq.n	8002caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4b17      	ldr	r3, [pc, #92]	@ (8002cd4 <HAL_RCC_OscConfig+0x274>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7ff fb9c 	bl	80023b8 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7ff fb98 	bl	80023b8 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e160      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f000 fa9c 	bl	80031e0 <RCC_Delay>
 8002ca8:	e01c      	b.n	8002ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002caa:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd4 <HAL_RCC_OscConfig+0x274>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb0:	f7ff fb82 	bl	80023b8 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb6:	e00f      	b.n	8002cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7ff fb7e 	bl	80023b8 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d908      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e146      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	42420000 	.word	0x42420000
 8002cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	4b92      	ldr	r3, [pc, #584]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e9      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a6 	beq.w	8002e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10d      	bne.n	8002d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4b88      	ldr	r3, [pc, #544]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	4a87      	ldr	r2, [pc, #540]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	61d3      	str	r3, [r2, #28]
 8002d0e:	4b85      	ldr	r3, [pc, #532]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b82      	ldr	r3, [pc, #520]	@ (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d118      	bne.n	8002d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d36:	f7ff fb3f 	bl	80023b8 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3e:	f7ff fb3b 	bl	80023b8 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b64      	cmp	r3, #100	@ 0x64
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e103      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	4b75      	ldr	r3, [pc, #468]	@ (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x312>
 8002d64:	4b6f      	ldr	r3, [pc, #444]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4a6e      	ldr	r2, [pc, #440]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6213      	str	r3, [r2, #32]
 8002d70:	e02d      	b.n	8002dce <HAL_RCC_OscConfig+0x36e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x334>
 8002d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a69      	ldr	r2, [pc, #420]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6213      	str	r3, [r2, #32]
 8002d86:	4b67      	ldr	r3, [pc, #412]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a66      	ldr	r2, [pc, #408]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6213      	str	r3, [r2, #32]
 8002d92:	e01c      	b.n	8002dce <HAL_RCC_OscConfig+0x36e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d10c      	bne.n	8002db6 <HAL_RCC_OscConfig+0x356>
 8002d9c:	4b61      	ldr	r3, [pc, #388]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4a60      	ldr	r2, [pc, #384]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	6213      	str	r3, [r2, #32]
 8002da8:	4b5e      	ldr	r3, [pc, #376]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a5d      	ldr	r2, [pc, #372]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6213      	str	r3, [r2, #32]
 8002db4:	e00b      	b.n	8002dce <HAL_RCC_OscConfig+0x36e>
 8002db6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4a5a      	ldr	r2, [pc, #360]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	6213      	str	r3, [r2, #32]
 8002dc2:	4b58      	ldr	r3, [pc, #352]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4a57      	ldr	r2, [pc, #348]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	f023 0304 	bic.w	r3, r3, #4
 8002dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d015      	beq.n	8002e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7ff faef 	bl	80023b8 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dde:	f7ff faeb 	bl	80023b8 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0b1      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ee      	beq.n	8002dde <HAL_RCC_OscConfig+0x37e>
 8002e00:	e014      	b.n	8002e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7ff fad9 	bl	80023b8 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7ff fad5 	bl	80023b8 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e09b      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e20:	4b40      	ldr	r3, [pc, #256]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ee      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e32:	4b3c      	ldr	r3, [pc, #240]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	4a3b      	ldr	r2, [pc, #236]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8087 	beq.w	8002f56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e48:	4b36      	ldr	r3, [pc, #216]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d061      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d146      	bne.n	8002eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5c:	4b33      	ldr	r3, [pc, #204]	@ (8002f2c <HAL_RCC_OscConfig+0x4cc>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7ff faa9 	bl	80023b8 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6a:	f7ff faa5 	bl	80023b8 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e06d      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7c:	4b29      	ldr	r3, [pc, #164]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e90:	d108      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e92:	4b24      	ldr	r3, [pc, #144]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	4921      	ldr	r1, [pc, #132]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a19      	ldr	r1, [r3, #32]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	491b      	ldr	r1, [pc, #108]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f2c <HAL_RCC_OscConfig+0x4cc>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7ff fa79 	bl	80023b8 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eca:	f7ff fa75 	bl	80023b8 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e03d      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002edc:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x46a>
 8002ee8:	e035      	b.n	8002f56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eea:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7ff fa62 	bl	80023b8 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7ff fa5e 	bl	80023b8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e026      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0a:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x498>
 8002f16:	e01e      	b.n	8002f56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e019      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40007000 	.word	0x40007000
 8002f2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <HAL_RCC_OscConfig+0x500>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d106      	bne.n	8002f52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000

08002f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0d0      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b6a      	ldr	r3, [pc, #424]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d910      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b67      	ldr	r3, [pc, #412]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 0207 	bic.w	r2, r3, #7
 8002f8e:	4965      	ldr	r1, [pc, #404]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b63      	ldr	r3, [pc, #396]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b8      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc0:	4b59      	ldr	r3, [pc, #356]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a58      	ldr	r2, [pc, #352]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd8:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b50      	ldr	r3, [pc, #320]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	494d      	ldr	r1, [pc, #308]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d040      	beq.n	8003084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b47      	ldr	r3, [pc, #284]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07f      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e073      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b3d      	ldr	r3, [pc, #244]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06b      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4936      	ldr	r1, [pc, #216]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003054:	f7ff f9b0 	bl	80023b8 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7ff f9ac 	bl	80023b8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e053      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b2d      	ldr	r3, [pc, #180]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b27      	ldr	r3, [pc, #156]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d210      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b24      	ldr	r3, [pc, #144]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 0207 	bic.w	r2, r3, #7
 800309a:	4922      	ldr	r1, [pc, #136]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b20      	ldr	r3, [pc, #128]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e032      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4916      	ldr	r1, [pc, #88]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030de:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490e      	ldr	r1, [pc, #56]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f2:	f000 f821 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490a      	ldr	r1, [pc, #40]	@ (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a09      	ldr	r2, [pc, #36]	@ (8003130 <HAL_RCC_ClockConfig+0x1cc>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800310e:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HAL_RCC_ClockConfig+0x1d0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff f920 	bl	8002358 <HAL_InitTick>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40022000 	.word	0x40022000
 8003128:	40021000 	.word	0x40021000
 800312c:	08003e94 	.word	0x08003e94
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004

08003138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003152:	4b1e      	ldr	r3, [pc, #120]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b04      	cmp	r3, #4
 8003160:	d002      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x30>
 8003162:	2b08      	cmp	r3, #8
 8003164:	d003      	beq.n	800316e <HAL_RCC_GetSysClockFreq+0x36>
 8003166:	e027      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003168:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800316a:	613b      	str	r3, [r7, #16]
      break;
 800316c:	e027      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	0c9b      	lsrs	r3, r3, #18
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	4a17      	ldr	r2, [pc, #92]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003178:	5cd3      	ldrb	r3, [r2, r3]
 800317a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003186:	4b11      	ldr	r3, [pc, #68]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	0c5b      	lsrs	r3, r3, #17
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	4a11      	ldr	r2, [pc, #68]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003192:	5cd3      	ldrb	r3, [r2, r3]
 8003194:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a0d      	ldr	r2, [pc, #52]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800319a:	fb03 f202 	mul.w	r2, r3, r2
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e004      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a0c      	ldr	r2, [pc, #48]	@ (80031dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	613b      	str	r3, [r7, #16]
      break;
 80031b6:	e002      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ba:	613b      	str	r3, [r7, #16]
      break;
 80031bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031be:	693b      	ldr	r3, [r7, #16]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	007a1200 	.word	0x007a1200
 80031d4:	08003eb4 	.word	0x08003eb4
 80031d8:	08003ec4 	.word	0x08003ec4
 80031dc:	003d0900 	.word	0x003d0900

080031e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003214 <RCC_Delay+0x34>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003218 <RCC_Delay+0x38>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	0a5b      	lsrs	r3, r3, #9
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031fc:	bf00      	nop
  }
  while (Delay --);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1e5a      	subs	r2, r3, #1
 8003202:	60fa      	str	r2, [r7, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f9      	bne.n	80031fc <RCC_Delay+0x1c>
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	20000000 	.word	0x20000000
 8003218:	10624dd3 	.word	0x10624dd3

0800321c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e041      	b.n	80032b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fe f894 	bl	8001370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f000 fa10 	bl	8003680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e041      	b.n	8003350 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f839 	bl	8003358 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f000 f9c1 	bl	8003680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
	...

0800336c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003386:	2302      	movs	r3, #2
 8003388:	e0ae      	b.n	80034e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	f200 809f 	bhi.w	80034d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800339a:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033d5 	.word	0x080033d5
 80033a4:	080034d9 	.word	0x080034d9
 80033a8:	080034d9 	.word	0x080034d9
 80033ac:	080034d9 	.word	0x080034d9
 80033b0:	08003415 	.word	0x08003415
 80033b4:	080034d9 	.word	0x080034d9
 80033b8:	080034d9 	.word	0x080034d9
 80033bc:	080034d9 	.word	0x080034d9
 80033c0:	08003457 	.word	0x08003457
 80033c4:	080034d9 	.word	0x080034d9
 80033c8:	080034d9 	.word	0x080034d9
 80033cc:	080034d9 	.word	0x080034d9
 80033d0:	08003497 	.word	0x08003497
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f9be 	bl	800375c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0208 	orr.w	r2, r2, #8
 80033ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0204 	bic.w	r2, r2, #4
 80033fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6999      	ldr	r1, [r3, #24]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	619a      	str	r2, [r3, #24]
      break;
 8003412:	e064      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fa04 	bl	8003828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800342e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800343e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6999      	ldr	r1, [r3, #24]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	619a      	str	r2, [r3, #24]
      break;
 8003454:	e043      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fa4d 	bl	80038fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0208 	orr.w	r2, r2, #8
 8003470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0204 	bic.w	r2, r2, #4
 8003480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69d9      	ldr	r1, [r3, #28]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	61da      	str	r2, [r3, #28]
      break;
 8003494:	e023      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fa97 	bl	80039d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	021a      	lsls	r2, r3, #8
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	61da      	str	r2, [r3, #28]
      break;
 80034d6:	e002      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	75fb      	strb	r3, [r7, #23]
      break;
 80034dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_TIM_ConfigClockSource+0x1c>
 8003508:	2302      	movs	r3, #2
 800350a:	e0b4      	b.n	8003676 <HAL_TIM_ConfigClockSource+0x186>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800352a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003544:	d03e      	beq.n	80035c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800354a:	f200 8087 	bhi.w	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800354e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003552:	f000 8086 	beq.w	8003662 <HAL_TIM_ConfigClockSource+0x172>
 8003556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800355a:	d87f      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800355c:	2b70      	cmp	r3, #112	@ 0x70
 800355e:	d01a      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0xa6>
 8003560:	2b70      	cmp	r3, #112	@ 0x70
 8003562:	d87b      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 8003564:	2b60      	cmp	r3, #96	@ 0x60
 8003566:	d050      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x11a>
 8003568:	2b60      	cmp	r3, #96	@ 0x60
 800356a:	d877      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800356c:	2b50      	cmp	r3, #80	@ 0x50
 800356e:	d03c      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0xfa>
 8003570:	2b50      	cmp	r3, #80	@ 0x50
 8003572:	d873      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 8003574:	2b40      	cmp	r3, #64	@ 0x40
 8003576:	d058      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x13a>
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	d86f      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b30      	cmp	r3, #48	@ 0x30
 800357e:	d064      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003580:	2b30      	cmp	r3, #48	@ 0x30
 8003582:	d86b      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b20      	cmp	r3, #32
 8003586:	d060      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003588:	2b20      	cmp	r3, #32
 800358a:	d867      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05c      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003590:	2b10      	cmp	r3, #16
 8003592:	d05a      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003594:	e062      	b.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035a6:	f000 fad8 	bl	8003b5a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	609a      	str	r2, [r3, #8]
      break;
 80035c2:	e04f      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035d4:	f000 fac1 	bl	8003b5a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035e6:	609a      	str	r2, [r3, #8]
      break;
 80035e8:	e03c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f6:	461a      	mov	r2, r3
 80035f8:	f000 fa38 	bl	8003a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2150      	movs	r1, #80	@ 0x50
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fa8f 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 8003608:	e02c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003616:	461a      	mov	r2, r3
 8003618:	f000 fa56 	bl	8003ac8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2160      	movs	r1, #96	@ 0x60
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fa7f 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 8003628:	e01c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003636:	461a      	mov	r2, r3
 8003638:	f000 fa18 	bl	8003a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2140      	movs	r1, #64	@ 0x40
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fa6f 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 8003648:	e00c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f000 fa66 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 800365a:	e003      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	e000      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a2f      	ldr	r2, [pc, #188]	@ (8003750 <TIM_Base_SetConfig+0xd0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00b      	beq.n	80036b0 <TIM_Base_SetConfig+0x30>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800369e:	d007      	beq.n	80036b0 <TIM_Base_SetConfig+0x30>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003754 <TIM_Base_SetConfig+0xd4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_Base_SetConfig+0x30>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003758 <TIM_Base_SetConfig+0xd8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d108      	bne.n	80036c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a22      	ldr	r2, [pc, #136]	@ (8003750 <TIM_Base_SetConfig+0xd0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00b      	beq.n	80036e2 <TIM_Base_SetConfig+0x62>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d0:	d007      	beq.n	80036e2 <TIM_Base_SetConfig+0x62>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003754 <TIM_Base_SetConfig+0xd4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d003      	beq.n	80036e2 <TIM_Base_SetConfig+0x62>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003758 <TIM_Base_SetConfig+0xd8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d108      	bne.n	80036f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <TIM_Base_SetConfig+0xd0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d103      	bne.n	8003728 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f023 0201 	bic.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	611a      	str	r2, [r3, #16]
  }
}
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800

0800375c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f023 0201 	bic.w	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0303 	bic.w	r3, r3, #3
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f023 0302 	bic.w	r3, r3, #2
 80037a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003824 <TIM_OC1_SetConfig+0xc8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d10c      	bne.n	80037d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0308 	bic.w	r3, r3, #8
 80037be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f023 0304 	bic.w	r3, r3, #4
 80037d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a13      	ldr	r2, [pc, #76]	@ (8003824 <TIM_OC1_SetConfig+0xc8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d111      	bne.n	80037fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	621a      	str	r2, [r3, #32]
}
 8003818:	bf00      	nop
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00

08003828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f023 0210 	bic.w	r2, r3, #16
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800385e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0320 	bic.w	r3, r3, #32
 8003872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a1d      	ldr	r2, [pc, #116]	@ (80038f8 <TIM_OC2_SetConfig+0xd0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d10d      	bne.n	80038a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800388e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a14      	ldr	r2, [pc, #80]	@ (80038f8 <TIM_OC2_SetConfig+0xd0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d113      	bne.n	80038d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	40012c00 	.word	0x40012c00

080038fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800392a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0303 	bic.w	r3, r3, #3
 8003932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a1d      	ldr	r2, [pc, #116]	@ (80039cc <TIM_OC3_SetConfig+0xd0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d10d      	bne.n	8003976 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a14      	ldr	r2, [pc, #80]	@ (80039cc <TIM_OC3_SetConfig+0xd0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d113      	bne.n	80039a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40012c00 	.word	0x40012c00

080039d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	031b      	lsls	r3, r3, #12
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8003a68 <TIM_OC4_SetConfig+0x98>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d109      	bne.n	8003a44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	019b      	lsls	r3, r3, #6
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	40012c00 	.word	0x40012c00

08003a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f023 0201 	bic.w	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f023 030a 	bic.w	r3, r3, #10
 8003aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0210 	bic.w	r2, r3, #16
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	031b      	lsls	r3, r3, #12
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	621a      	str	r2, [r3, #32]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr

08003b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f043 0307 	orr.w	r3, r3, #7
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b087      	sub	sp, #28
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	021a      	lsls	r2, r3, #8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	609a      	str	r2, [r3, #8]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e046      	b.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a16      	ldr	r2, [pc, #88]	@ (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00e      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bfc:	d009      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a12      	ldr	r2, [pc, #72]	@ (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d004      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a10      	ldr	r2, [pc, #64]	@ (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10c      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800

08003c54 <memset>:
 8003c54:	4603      	mov	r3, r0
 8003c56:	4402      	add	r2, r0
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d100      	bne.n	8003c5e <memset+0xa>
 8003c5c:	4770      	bx	lr
 8003c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c62:	e7f9      	b.n	8003c58 <memset+0x4>

08003c64 <__libc_init_array>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	2600      	movs	r6, #0
 8003c68:	4d0c      	ldr	r5, [pc, #48]	@ (8003c9c <__libc_init_array+0x38>)
 8003c6a:	4c0d      	ldr	r4, [pc, #52]	@ (8003ca0 <__libc_init_array+0x3c>)
 8003c6c:	1b64      	subs	r4, r4, r5
 8003c6e:	10a4      	asrs	r4, r4, #2
 8003c70:	42a6      	cmp	r6, r4
 8003c72:	d109      	bne.n	8003c88 <__libc_init_array+0x24>
 8003c74:	f000 f81a 	bl	8003cac <_init>
 8003c78:	2600      	movs	r6, #0
 8003c7a:	4d0a      	ldr	r5, [pc, #40]	@ (8003ca4 <__libc_init_array+0x40>)
 8003c7c:	4c0a      	ldr	r4, [pc, #40]	@ (8003ca8 <__libc_init_array+0x44>)
 8003c7e:	1b64      	subs	r4, r4, r5
 8003c80:	10a4      	asrs	r4, r4, #2
 8003c82:	42a6      	cmp	r6, r4
 8003c84:	d105      	bne.n	8003c92 <__libc_init_array+0x2e>
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8c:	4798      	blx	r3
 8003c8e:	3601      	adds	r6, #1
 8003c90:	e7ee      	b.n	8003c70 <__libc_init_array+0xc>
 8003c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c96:	4798      	blx	r3
 8003c98:	3601      	adds	r6, #1
 8003c9a:	e7f2      	b.n	8003c82 <__libc_init_array+0x1e>
 8003c9c:	08003ed0 	.word	0x08003ed0
 8003ca0:	08003ed0 	.word	0x08003ed0
 8003ca4:	08003ed0 	.word	0x08003ed0
 8003ca8:	08003ed4 	.word	0x08003ed4

08003cac <_init>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	bf00      	nop
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr

08003cb8 <_fini>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr
